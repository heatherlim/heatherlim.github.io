<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Code n' Stuff]]></title>
  <link href="http://heatherlim.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://heatherlim.github.io/"/>
  <updated>2016-06-24T11:31:40-04:00</updated>
  <id>http://heatherlim.github.io/</id>
  <author>
    <name><![CDATA[Heather Lim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD Practice: Life and Death of a Cell (Conway's Game of Life)]]></title>
    <link href="http://heatherlim.github.io/blog/2016/03/06/tdd-practice-in-java-with-conways-game-of-life/"/>
    <updated>2016-03-06T23:18:22-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/03/06/tdd-practice-in-java-with-conways-game-of-life</id>
    <content type="html"><![CDATA[<p>I got a bit more practice since my last post on just barely touching IntelliJ. I&rsquo;m currently working on implementing Conway&rsquo;s Game of Life in Java and I decided to use TDD to help me along the process. I like how it helps me to think on the design of my code. And that I can be sure new methods I write don&rsquo;t break my previous ones. Right now, I&rsquo;m going to walk through the process of the cell logic in the Game of Life.</p>

<p><strong>Rules (Taken from Wikipedia)</strong><br>
1) Any live cell with fewer than two live neighbours dies, as if caused by under-population.<br>
2) Any live cell with two or three live neighbours lives on to the next generation.<br>
3) Any live cell with more than three live neighbours dies, as if by over-population.<br>
4) Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>

<p>The first test I decided to write was that a cell&rsquo;s initial state would be dead. (Something nice about using IntelliJ was that it would help auto-import libraries and the auto-completion is really convenient. Also, clicking option+enter brings up available suggestions to fix an error in your code.)
<code>
public class CellTest {
    @Test
    public void InitialStateisDead() {
        Cell cell = new Cell();
        Assert.assertEquals(cell.getState(), false);
    }  
}
</code>
This test would automatically fail. Which is what we expected. The next step is to pass this test in the absolute simplest way. So to make this test pass, we would just make the method state return false.
<code>
public class Cell {
     public boolean getState(){
       return false;
    }
}
</code>
Great, so now we have all our tests passing. But what happens if the state of our cell is alive? We need to write a test that can check that.
<code>
@Test
    public void CellStateCanChange(){
      Cell changeCellAlive = new Cell();
        changeCellAlive.changeState();
        Assert.assertEquals(changeCellAlive.getState(), true);
    }
</code>
The test right now is failing. We need to write a changeState method which is missing right now. While it should make the state of our cell toggle, we are going one small step at a time. I made an instance variable that returns false and made it so our method state would be returning that variable. So the simplest way to just make the test pass would be for changeState to just set the state of the cell as true as you can see in line 7.
<code>
public class Cell {
    private boolean state = false;
    public boolean getState(){
       return state;
    }
    public void changeState() {
        state = true;
    }
}
</code>
Now however, we want to see if a cell can change from alive to dead. We will write a test that will try to change the state of an alive cell and the state should return false. Of course the test will fail as right now, changeState can only make the state change to true, not false.
<code>
@Test
public void CellStateCanChange(){
  Cell changeCellAlive = new Cell();
  changeCellAlive.changeState();
  Cell changeCellDead = new Cell();
  changeCellDead.changeState();
  changeCellDead.changeState();
  Assert.assertEquals(changeCellAlive.getState(), true);
  Assert.assertEquals(changeCellDead.getState(), false);
}
</code>
To make this test pass, I am going to edit the changeState method. It will check the state of the cell and be able to toggle it.
<code>
public class Cell {
  private boolean state = false;
  public boolean getState(){
     return state;
  }
  public void changeState() {
     state = !state;
  }
}
</code>
The test passes now. I want to start incorporating some of the rules of Conway&rsquo;s Game of Life. Namely, the condition where a cell can live onto the next stage. A cell that has two or three neighbours will be able to live onto the next generation.
<code>
@Test
   public void CanLiveOnToNextStage(){
     Cell cell = new Cell();
       Cell cell2 = new Cell();
       cell2.nextState(3);
       cell.nextState(2);
       Assert.assertEquals(cell.getNextState(), true);
       Assert.assertEquals(cell.getNextState(), true);
   }
</code>
To make the test pass, I&rsquo;ll create the method getNextState and nextState. nextState determines what the cell&rsquo;s next state is. It will accept an integer as an argument. The integer is meant to represent the number of neighbours that the cell has. getNextState will be retrieving what the next state is.
<code>
public class Cell {
    private boolean state = false;
    private boolean nextState = false;
    public boolean getState(){
       return state;
    }
    public void changeState() {
        state = !state;
    }
    public boolean getNextState(){
        return nextState;
    }
    public void nextState(int i) {
        if(i == 2 || i == 3){
            nextState = true;
        }
    }
}
</code>
Now that the tests pass, I&rsquo;m going to move onto other tests that see what situations a cell wouldn&rsquo;t be living onto the next generation. Let&rsquo;s do under-population. If a live cell has fewer than two live neighbours, it will die. By default however, because our nextState is set to false, our tests should pass automatically. But as we want the tests to fail, I set the next state to have neighbours of 3 first. Then, I set it to lower numbers. To clarify, let&rsquo;s say I did not previously set the state of the neighbours to have 3 first. Then I would end up with a test like this:
<code>
@Test
    public void WillDieOfUnderpopulation(){
        Cell noNeighbourCell = new Cell();
        Cell oneNeighbourCell = new Cell();
        noNeighbourCell.nextState(0);
        oneNeighbourCell.nextState(1);
        Assert.assertEquals(noNeighbourCell.getNextState(), false);
        Assert.assertEquals(oneNeighbourCell.getNextState(), false);
    }
</code>
These tests would actually be passing. But that would be an inaccurate reflection of what I want the code to do. I need the tests to fail so I can edit the code to account for that. After all, the next state of a cell is by default always going to be false. I will have to write something to make it true and see if it can change to false. So notice the two extra lines I write on the test below.
<code>
@Test
    public void WillDieOfUnderpopulation(){
        Cell noNeighbourCell = new Cell();
        Cell oneNeighbourCell = new Cell();
        noNeighbourCell.nextState(3);
        noNeighbourCell.nextState(0);
        oneNeighbourCell.nextState(3);
        oneNeighbourCell.nextState(1);
        Assert.assertEquals(noNeighbourCell.getNextState(), false);
        Assert.assertEquals(oneNeighbourCell.getNextState(), false);
    }
</code>
To pass this, I just need to fill in the else statement of our nextState method.
<code>
public void nextState(int i) {
        if(i == 2 || i == 3){
            nextState = true;
        } else {
            nextState = false;
        }
    }
</code>
I continue to test in this manner. I get the test to pass then I think of more specific scenarios to test to get the test to fail and then I go back to refine the code more. I still need to write the tests for what happens in the event of over-population and how reproduction works.</p>

<p>I also decided to go back to refactor a bit. I began to think that holding the next state of my cell in a variable is a little unnecessary. I delete my getState method as well as the variable. Instead, these are what my methods look like now:
<code>
public class Cell {
    private boolean state = false;
    public boolean getState(){
       return state;
    }
    public void changeState() {
        state = !state;
    }
    public boolean nextState(int i) {
        if(i == 2 || i == 3){
            return true;
        } else {
            return false;
        }
    }
    public void next(int i) {
        if(state != this.nextState(i)){
            this.changeState();
        }
    }
}
</code>
I do change the tests a little to reflect this change. Some methods after all are now accepting arguments. It does show my tests could have been testing too much and were a little brittle. Generally, I would not want to change my tests to account for this refactoring. This project is still a work in progress but it feels good to familiarise myself with Java, an IDE as well as testing. The final product will also use the Slick2D library for drawing out this game. I might do another separate blog post on how to integrate it with IntelliJ. While Maven did a lot of it for me, there were some native dependencies that were missing and I had to manually put them in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World in IntelliJ - First Experience with an IDE]]></title>
    <link href="http://heatherlim.github.io/blog/2016/03/04/hello-world-in-intellij-first-experience-with-an-ide/"/>
    <updated>2016-03-04T01:28:57-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/03/04/hello-world-in-intellij-first-experience-with-an-ide</id>
    <content type="html"><![CDATA[<p>I come from a coding bootcamp background (I attended Flatiron School). Being in the web development class, my first language was Ruby and my coding environment was pretty much just Sublime Text (though more recently Atom). With Ruby as a first language, IDEs can seem to be pretty alien. What&rsquo;s the point? Isn&rsquo;t everything I need just in a simple text editor? These are the questions I had when Ruby was the only language I knew. While there are Ruby IDEs out there, you can get by with no trouble just using a text editor.</p>

<p>I ran into my first feeling that I needed an IDE when I started learning Java. It was very different from Ruby. I needed to get used to a static language. Arrays that needed to know what size they were, variables to be declared and remembering to compile a program before running it. I admit that my first Java program (a simple shopping cart reader that would get its input from a text file and give a receipt as an output after calculating item totals and tax) was programmed entirely on sublime and while coding, I kept thinking - This feels a lot harder than it should be. After the horrified look I got from a friend when I mentioned I was coding Java on a text editor, he recommended IntelliJ as an IDE to use. And that is where I am now.</p>

<p>So to start off&hellip; what is an IDE?</p>

<p>IDE stands for Integrated Development Environment. IntelliJ doesn&rsquo;t just give a platform for writing code on, but it also contains a compiler, built-in debugging (way better than my beloved binding.pry), and a very helpful autocomplete.</p>

<p>This all seems great!</p>

<p>One of my main issues from my first Java program was just forgetting to compile and so on&hellip; it was an extra step that I didn&rsquo;t need to do with Ruby. However, just getting started on an IDE having never encountered one before has led me to see that there is a learning curve. With a text editor, I could hit the ground running and immediately start writing code. But there is some familiarity that needs to be developed with an IDE and learning one is a challenge in and of itself.</p>

<p>As you can see from the title of this blog post, this is just a simple guide on creating a Hello World program with IntelliJ. (The pictures might look a little bit small but they expand if you click on them.) This post also helps me document my learning progress.</p>

<p>Step 1: Create a new project</p>

<p>When you open up IntelliJ, click on the option to make a new project.</p>

<center>
<img src="/images/intellij1.png" width = 400>
</center>


<p>Step 2: Navigate through the options and select the command line app template.</p>

<p>Once you&rsquo;ve clicked new project, you are given the option to include additional libraries and frameworks. If you click next (because we&rsquo;re not using any), you&rsquo;ll get to the template selection page. We&rsquo;re just making a hello world program so we&rsquo;ll just pick the command line app template.</p>

<center>
<img src="/images/intellij2.png" width = 400><img src="/images/intellij2a.png" width = 400>
</center>


<p>Step 3: Name the project and choose its location</p>

<p>I already had a folder called HelloWorld made.</p>

<center>
<img src="/images/intellij3.png" width = 400>
</center>


<p>Step 4: Write the code</p>

<p>Selecting the command line template makes the public static void appear automatically. So we just need to fill in the rest. While writing, it was nice to see the auto-complete. It&rsquo;s helpful to be able to see the methods you have available to you.</p>

<center>
<img src="/images/intellij4.png" width = 400>
</center>


<p>Step 5: Running the code</p>

<p>To run the code and see &ldquo;hello world!&rdquo; printed out, we just need to hit the green triangle on the top right of the window.</p>

<center>
<img src="/images/intellij5.png" width = 400>
</center>


<p>And there you have it, my first attempt at trying to familiarize myself a little bit with the absolute basics of IntelliJ before really diving into it. It was definitely a little strange for me at first, coming over from Ruby for the need of an IDE. But I can already tell that if I had written my Java shopping cart reader with IntelliJ, it would have saved me a lot of time in the long run. Overall, I can tell that using an IDE is a lot more powerful but it does have a steeper learning curve when compared to the text editors that I am more familiar with.</p>
]]></content>
  </entry>
  
</feed>
