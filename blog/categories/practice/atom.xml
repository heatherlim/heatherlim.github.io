<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: practice | Code n' Stuff]]></title>
  <link href="http://heatherlim.github.io/blog/categories/practice/atom.xml" rel="self"/>
  <link href="http://heatherlim.github.io/"/>
  <updated>2016-03-04T02:40:43-05:00</updated>
  <id>http://heatherlim.github.io/</id>
  <author>
    <name><![CDATA[Heather Lim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello World in IntelliJ - First Experience with an IDE]]></title>
    <link href="http://heatherlim.github.io/blog/2016/03/04/hello-world-in-intellij-first-experience-with-an-ide/"/>
    <updated>2016-03-04T01:28:57-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/03/04/hello-world-in-intellij-first-experience-with-an-ide</id>
    <content type="html"><![CDATA[<p>I come from a coding bootcamp background (I attended Flatiron School). Being in the web development class, my first language was Ruby and my coding environment was pretty much just Sublime Text (though more recently Atom). With Ruby as a first language, IDEs can seem to be pretty alien. What&rsquo;s the point? Isn&rsquo;t everything I need just in a simple text editor? These are the questions I had when Ruby was the only language I knew. While there are Ruby IDEs out there, you can get by with no trouble just using a text editor.</p>

<p>I ran into my first feeling that I needed an IDE when I started learning Java. It was very different from Ruby. I needed to get used to a static language. Arrays that needed to know what size they were, variables to be declared and remembering to compile a program before running it. I admit that my first Java program (a simple shopping cart reader that would get its input from a text file and give a receipt as an output after calculating item totals and tax) was programmed entirely on sublime and while coding, I kept thinking - This feels a lot harder than it should be. After the horrified look I got from a friend when I mentioned I was coding Java on a text editor, he recommended IntelliJ as an IDE to use. And that is where I am now.</p>

<p>So to start off&hellip; what is an IDE?</p>

<p>IDE stands for Integrated Development Environment. IntelliJ doesn&rsquo;t just give a platform for writing code on, but it also contains a compiler, built-in debugging (way better than my beloved binding.pry), and a very helpful autocomplete.</p>

<p>This all seems great!</p>

<p>One of my main issues from my first Java program was just forgetting to compile and so on&hellip; it was an extra step that I didn&rsquo;t need to do with Ruby. However, just getting started on an IDE having never encountered one before has led me to see that there is a learning curve. With a text editor, I could hit the ground running and immediately start writing code. But there is some familiarity that needs to be developed with an IDE and learning one is a challenge in and of itself.</p>

<p>As you can see from the title of this blog post, this is just a simple guide on creating a Hello World program with IntelliJ. (The pictures might look a little bit small but they expand if you click on them.) This post also helps me document my learning progress.</p>

<p>Step 1: Create a new project</p>

<p>When you open up IntelliJ, click on the option to make a new project.</p>

<center>
<img src="/images/intellij1.png" width = 400>
</center>


<p>Step 2: Navigate through the options and select the command line app template.</p>

<p>Once you&rsquo;ve clicked new project, you are given the option to include additional libraries and frameworks. If you click next (because we&rsquo;re not using any), you&rsquo;ll get to the template selection page. We&rsquo;re just making a hello world program so we&rsquo;ll just pick the command line app template.</p>

<center>
<img src="/images/intellij2.png" width = 400><img src="/images/intellij2a.png" width = 400>
</center>


<p>Step 3: Name the project and choose its location</p>

<p>I already had a folder called HelloWorld made.</p>

<center>
<img src="/images/intellij3.png" width = 400>
</center>


<p>Step 4: Write the code</p>

<p>Selecting the command line template makes the public static void appear automatically. So we just need to fill in the rest. While writing, it was nice to see the auto-complete. It&rsquo;s helpful to be able to see the methods you have available to you.</p>

<center>
<img src="/images/intellij4.png" width = 400>
</center>


<p>Step 5: Running the code</p>

<p>To run the code and see &ldquo;hello world!&rdquo; printed out, we just need to hit the green triangle on the top right of the window.</p>

<center>
<img src="/images/intellij5.png" width = 400>
</center>


<p>And there you have it, my first attempt at trying to familiarize myself a little bit with the absolute basics of IntelliJ before really diving into it. It was definitely a little strange for me at first, coming over from Ruby for the need of an IDE. But I can already tell that if I had written my Java shopping cart reader with IntelliJ, it would have saved me a lot of time in the long run. Overall, I can tell that using an IDE is a lot more powerful but it does have a steeper learning curve when compared to the text editors that I am more familiar with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some TDD Practice]]></title>
    <link href="http://heatherlim.github.io/blog/2016/02/22/some-tdd-practice/"/>
    <updated>2016-02-22T13:28:26-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/02/22/some-tdd-practice</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m going to be practicing my TDD by implementing a set in Ruby using arrays. While the Set class in Ruby uses hashes as storage for various reasons, this is just for practicing a TDD way of coding and also practice for writing tests in RSpec. So I&rsquo;m not trying to demonstrate a great way of implementing sets or that this is a better way to do sets (spoiler: It&rsquo;s really not).</p>

<p><strong>Some things to know about Sets:</strong>
<br>
- Order doesn&rsquo;t matter (unordered)
<br>
- Contains unique values</p>

<p>So the TDD steps&hellip; you would want to write tests first and let that guide how you write your code. You would first write a simple test, run it, see it fail and then write minimal code to make it pass (The simplest way you can make it pass). Then you move on to write the next test.</p>

<p>First things first, we are going to write a test. We are going to say what the test is describing. It will be something like this:</p>

<pre><code>describe Set do

end
</code></pre>

<p>Now we are going to think about what kind of method we want the set to have.</p>

<p>For a quick example, let&rsquo;s say you want to convert the set into an array. So we are going to write a test for that.</p>

<pre><code>describe Set do

  describe "#to_array" do
      it "returns an array of all elements in the set" do
        @set = Set.new([1])
        expect(@set.to_array).to contain_exactly(1)
      end
  end

end
</code></pre>

<p>Note: This test is failing</p>

<p><img src="/images/testfail.png"></p>

<p>(You can ignore the number &ldquo;3)&rdquo; there. I screenshotted the fail message only after I finished this exercise so I already have a couple tests written)</p>

<p>As we haven&rsquo;t really written anything, the test will fail when we run it which is exactly what we want. Now we have to write some code to make the test pass.</p>

<pre><code>class Set

  def initialize(array)
    @array = array
  end

  def to_array
    @array
  end

end
</code></pre>

<p>With this, the test now passes. Great!</p>

<p>Now, we can add more stuff in. Let&rsquo;s write another test to make sure only arrays can get passed as arguments. As Ruby is not a type language, we cannot specify what data types we accept as an argument.</p>

<pre><code>it "accepts only an array as an argument" do
    expect(Set.new([1,2,3]).to_array).to contain_exactly(1,2,3)
    expect(Set.new(1).to_array).to contain_exactly()
    expect(Set.new("a").to_array).to contain_exactly()
end
</code></pre>

<p>The test expects that if the argument is not an array, a set is made but it will be an empty set. It&rsquo;s important to note that our task is to write tests that fail. So even though the first expect line we write will pass, the other two will not.</p>

<p>To make this next step pass:
<code>
def initialize(array)
  if array.class != Array
    @array = []
  else
    @array = array
  end
end
</code>
Now we can worry about one of the definitions of a set - that it contains only unique values. And we can write a test for that.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>it &ldquo;will create a set with unique elements&rdquo; do
</span><span class='line'>    expect(Set.new([1, 1, 2]).to_array).to contain_exactly(1, 2)
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;To make this pass, we can call .uniq on the argument like so:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def initialize(array)
</span><span class='line'>  if array.class != Array
</span><span class='line'>    @array = []
</span><span class='line'>  else
</span><span class='line'>    @array = array.uniq
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>
.uniq might not be the best way to do things, but it is important to keep in mind that at the moment, we are just concerned with doing the minimal to make the test pass.</p>

<p>I won&rsquo;t go through each and every one of my tests but eventually I found myself creating new sets for each test. So in my test file, I ended up doing:</p>

<pre><code>before :each do
  @shortset = Set.new([1])
  @mediumset = Set.new([1, 2, 3, 4, 5, 6].shuffle)
  @mediumset2 = Set.new([4, 5, 6, 7, 8, 9].shuffle)
end
</code></pre>

<p>This way I won&rsquo;t have to keep making new tests. Before each means that before each test, that block of code will run. So less repetition! I added the .shuffle because sets are not ordered. Before that, I had put in arrays in numerical order and didn&rsquo;t realize some tests actually failed when numerical order was not in place. Ideally, I think something I would change are the names of the sets as they aren&rsquo;t very descriptive. There&rsquo;s also a bit of refactoring to be done but the idea of TDD is to do the minimum to pass the tests and then write more tests that you expect to fail.</p>

<p>Overall, there&rsquo;s still some refactoring to be done but I quite like the practice I got with writing tests before the actual coding. I like TDD because it forces you to think before you code. You have to think about what you will be doing. And once the tests pass (there really is no better feeling&hellip;), you know that your job is done.</p>

<p>I&rsquo;m still tinkering around with it (with refactoring and such) but the full code can be viewed on github: <a href = "https://github.com/heatherlim/TDDPractice">HERE</a></p>
]]></content>
  </entry>
  
</feed>
