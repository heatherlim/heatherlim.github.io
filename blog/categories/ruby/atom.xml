<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Code n' Stuff]]></title>
  <link href="http://heatherlim.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://heatherlim.github.io/"/>
  <updated>2016-10-10T22:30:31-04:00</updated>
  <id>http://heatherlim.github.io/</id>
  <author>
    <name><![CDATA[Heather Lim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Associations with ActiveRecord]]></title>
    <link href="http://heatherlim.github.io/blog/2016/10/10/associations-with-activerecord/"/>
    <updated>2016-10-10T04:58:48-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/10/10/associations-with-activerecord</id>
    <content type="html"><![CDATA[<p>This post is based on the models I made for my demo API from the last post.</p>

<p>I want to make an app where users can save recipes. They can then have many collections of recipes they can refer to. Let&rsquo;s call each of these collections a recipe box. Also, a recipe will have lots of different ingredients so a user can easily look up what kinds of ingredients they need to make that recipe.</p>

<p>Simple enough!</p>

<p>First, I want to model out how I want the data to be stored. There are a few things to think about when doing this. Let&rsquo;s use Twitter for example.</p>

<table>
  <tr>
    <th colspan="2" style="text-align:center">users</th>
  </tr>
  <tr>
    <th>id</th>
    <th>name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Amy</td>
  </tr>
  <tr>
    <td>2</td>
    <td>John</td>
  </tr>
</table>


<p>Let&rsquo;s pretend this is the users table for Twitter. I&rsquo;m modeling this out in Rails and it is convention to have a plural table name. We know that a user can have many tweets. How would be a good way to store it? What if we added multiple columns to the users table? Would that be a good way?</p>

<table>
  <tr>
    <th colspan="5" style="text-align:center">users</th>
  </tr>
  <tr>
    <th>id</th>
    <th>name</th>
    <th style="text-align:center">tweet_1</th>
    <th style="text-align:center">tweet_2</th>
    <th style="text-align:center">tweet_3</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Amy</td>
    <td>Hello world</td>
    <td>Wow another column</td>
    <td>Getting kinda crowded</td>
  </tr>
  <tr>
    <td>2</td>
    <td>John</td>
    <td>What happens if we have hundreds of tweets?</td>
    <td>This table will get ridiculously big.</td>
    <td>What's a better way to do this?</td>
  </tr>
</table>


<p>As you can see however, this isn&rsquo;t the best way to do things. Another solution would be to create a separate table for tweets.</p>

<table>
  <tr>
    <th colspan="2" style="text-align:center">tweets</th>
  </tr>
  <tr>
    <th>id</th>
    <th style="text-align:center">body</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Hello world</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Much better now</td>
  </tr>
  <tr>
    <td>3</td>
    <td>We can just add more rows</td>
  </tr>
</table>


<p>But how can we now associate this tweet table with the users? This is where a join table comes in. We are going to make a user_tweets table that will be our reference for which tweet belongs to which user.</p>

<table>
  <tr>
    <th colspan="3" style="text-align:center">user_tweets</th>
  </tr>
  <tr>
    <th>id</th>
    <th style="text-align:center">user_id</th>
    <th style="text-align:center">tweet_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>1</td>
    <td>3</td>
  </tr>
  <tr>
    <td>3</td>
    <td>2</td>
    <td>2</td>
  </tr>
</table>


<p>In this table, the user_id refers to the id of the user table. The tweet_id refers to the id of the tweet table. These are known as foreign keys because they are referencing a row in a different table. Reading this, we can see that Amy has two tweets - tweet with id 1 and tweet with id 3.</p>

<p>Just below, is a diagram of my ActiveRecord models for the demo API. I used the Rails ERD gem for this.</p>

<p><img src = "/images/apidiagram.jpg" width = 500></p>

<p>As you can see, a recipe has many ingredients. Likewise, an ingredient will have many recipes. I&rsquo;ve joined these two tables together through a join table called recipe_ingredients. Just below, you can see how this kind of relationship is defined in your Rails model.</p>

<pre><code>class Recipe &lt; ActiveRecord::Base
  has_many :recipe_box_recipes
  has_many :recipe_boxes, through: :recipe_box_recipes
  has_many :recipe_ingredients
  has_many :ingredients, through: :recipe_ingredients
end

class RecipeIngredient &lt; ActiveRecord::Base
  belongs_to :recipe
  belongs_to :ingredient
end

class Ingredient &lt; ActiveRecord::Base
  has_many :recipe_ingredients
  has_many :recipes, through: :recipe_ingredients
end
</code></pre>

<p>We use a has_many :through as our model Recipe is matched with the model Ingredient by going through RecipeIngredient. My recipe_ingredients table has a column for both recipe_id and ingredient_id and that is how the two models are connected.</p>

<p>It is a bit of a simpler association between a User and their RecipeBox. A recipe box can only have on user while a user can have many recipe boxes. For this, we will not need a join table. However, a recipe box can contain many recipes and a recipe can also have many recipe boxes. So, we will need a join table for that relation. Here, it is called RecipeBoxRecipe. RecipeBoxRecipe has a recipe_box_id and a recipe_id for its foreign keys.</p>

<pre><code>class User &lt; ActiveRecord::Base
  has_many :recipe_boxes
end

class RecipeBox &lt; ActiveRecord::Base
  belongs_to :user
  has_many :recipe_box_recipes
  has_many :recipes, through: :recipe_box_recipes
end

class RecipeBoxRecipe &lt; ActiveRecord::Base
  belongs_to :recipe_box
  belongs_to :recipe
end
</code></pre>

<p>Now that we have set up these associations, we will be able to call methods like user.recipe_boxes to see all the boxes a chosen user has. We can also choose a specific recipe box and call something like recipe_box.recipes to see all the recipes it contains. Something also interesting to note for Rails is that when we created our tables, we did not have to define which column will be a foreign key. Rails naturally recognizes that the foreign key will be the name of the model with _id added.</p>

<p>ActiveRecord also lets us easily save a row to a table by calling .save on the model.</p>

<p>Let&rsquo;s say we want to add something to a table.</p>

<pre><code>@post = Post.new
@post.author = "Bob"
@post.title = "Hello World"
@post.description = "This is a post."
@post.save
</code></pre>

<p>Now we have a row that has both a recipe id and ingredient id of 1. Another way to do this is through what is known as mass assignment. This way, we can create this object with a parameter hash instead.
<code>
@post = Post.create(:author =&gt; "Bob", :title =&gt; "Hello World", :description =&gt; "This is a post.")
</code>
Something to think about when using mass assignment are strong parameters. With mass assignment, you can run into the danger where users can modify data they should not be able to.</p>

<pre><code>private

def post_params
  params.required(:post).permit(:author, :title, :description)
end
</code></pre>

<p>This way, the only params that can be modified are the author, title and description.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benefits of giving a Technical Presentation (some thoughts!)]]></title>
    <link href="http://heatherlim.github.io/blog/2016/08/16/summary-and-reflection-of-ruby-and-the-repository-pattern/"/>
    <updated>2016-08-16T16:21:55-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/08/16/summary-and-reflection-of-ruby-and-the-repository-pattern</id>
    <content type="html"><![CDATA[<p><figure align="center">
<img src = "/images/nycrbpresentation.jpg" width = 500>
<figcaption><em>Getting ready.</em></figcaption>
</figure></p>

<p><br>
Last August, I had the amazing opportunity to give my first real technical presentation at NYC.rb! (Here&rsquo;s a <a href = "http://www.meetup.com/NYC-rb/events/230515892/"> link </a> to its event page). I learnt a lot, found a way to give back to the Ruby community, and had a great time.</p>

<p>This whole adventure started when I was exploring using the repository pattern in Ruby - a language whose ecosystem is very much centered around Rails (which does not use the repository pattern). So to aid further understanding of this pattern, I used a lesser-known framework, <a href = "http://hanamirb.org/">Hanami</a>, to show how it compares with Rails' ActiveRecord. While there are other ways to force the repository pattern on Rails such as <a href = "http://rom-rb.org/">ROM</a>, after reading a <a href = "http://solnic.eu/2016/05/22/my-time-with-rails-is-up.html"> blog post</a> by Piotr Solnica, I guess thoughts about the state of the Ruby ecosystem had been lingering in my mind. What is Ruby without Rails? After all, if someone is a Ruby developer, chances are that they are working in Rails. But if a better Rails alternative comes out then isn&rsquo;t written in Ruby, what is going to happen to the Ruby language? Is Ruby&rsquo;s future too dependent on Rails? With these thoughts in mind, I thought it would be fun and educational to learn a new framework. And what better way to solidify learning something new then to give a technical talk?</p>

<p>From experience, I&rsquo;ve found explaining a concept to someone is a great way to test if you have truly understood what you had been learning. By explaining it to someone else, it forces your perspective on the concept to change - from &ldquo;just making it work&rdquo; to truly understanding why it works that way. It changes your priority. It&rsquo;s easy to copy + paste that piece of code from Stack Overflow to just make your app work but after all, I&rsquo;m learning to be a full-stack developer, not a full-stack-overflow developer. This technical talk was my way of challenging myself to pause for a moment and reflect on why does Rails use ActiveRecord and what are some alternatives to this architectural pattern? In the end, not only would I learn something but I&rsquo;ll also be sharing knowledge. So it is a win/win on both sides.</p>

<p>The experience of giving a talk really was a great learning experience. I felt I understood the concepts I was talking about a lot deeper than simply just knowing how to implement them. I became more aware of the different kinds of knowledge that exist. Implementing something is different from understanding it. But to implement something <em>well</em>, requires you to really understand what is going on. It gives you choice. When you understand something, you&rsquo;ll be able to choose the right tool for the job and make an informed decision. This is an important skill to have as a developer when you are faced with many different kinds of applications that might not fit the Rails model well.</p>

<p>Another benefit in giving a technical presentation is that it helps contribute to the community. I love the Ruby community. It was incredibly friendly when I first started learning and I always felt welcome at meetups no matter my skill level. I learnt so much from more experienced developers. Giving a talk is in a way giving back and hopefully somebody does learn something new in turn.</p>

<p>Finally, while this does not directly relate to programming, giving this presentation helped me gain confidence. I was very nervous initially and struggled a lot with imposter syndrome. Could someone really learn something from me? As much as I felt this talk was a challenge to myself to really understand the tools I was working with, it was also a  personal challenge. Simply, could I do it? It&rsquo;s tough when it is your first time getting up in front of an audience of developers, live coding, and then taking questions at the end. It really tests both your technical knowledge and your ability to keep calm under pressure (especially if you had never done something like this before). But all in all, it helped me to be more confident in myself and my efforts. It&rsquo;s something that I would definitely love to do again.</p>

<p>So to sum up: <br>
1) Giving a presentation helps you learn<br>
2) It gives back to the community<br>
3) It helps build confidence<br>
4) It&rsquo;s a lot of fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Ruby Meetup in Japan]]></title>
    <link href="http://heatherlim.github.io/blog/2016/06/23/my-first-ruby-meetup-in-japan/"/>
    <updated>2016-06-23T21:19:22-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/06/23/my-first-ruby-meetup-in-japan</id>
    <content type="html"><![CDATA[<p><figure align="center">
<img src = "/images/rubyorigami.jpg">
<figcaption><em>I definitely need to brush up my origami skills! (I made the one on the left).</em></figcaption>
</figure>
<br>
This post is a bit of a train of thought. I graduated from a coding bootcamp back in December and I&rsquo;m now two months into work life. It was just natural for me to start looking back and reflecting on how my programming journey first began even though I know it is still the beginning!</p>

<p>So, coming from a bootcamp, Ruby is my first programming language. I think one of my favourite things about it is the amazing community. There&rsquo;s a saying &ldquo;Matz is nice so we are nice&rdquo;. I loved the feeling about it. It was so positive and I felt it mirrored this love of programming and learning I had that eventually compelled me to sign up for a coding bootcamp. But as someone that started learning at a bootcamp, I dealt with imposter syndrome. Did I dupe my way past admissions? Do I really belong in the programming world? I did not major in computer science in college. But when I began to embrace this struggle and recognize that yes, learning to code is hard, I began to relax and keep myself open to learning. It was not as though I wasn&rsquo;t trying hard to learn, but it seemed that my own anxiety and worry kept me from realizing that this struggle is normal and had nothing to do with my fear that perhaps I was just incapable of learning to code. I also began to get involved in the Ruby community and attending local meetups. People are very friendly and willing to help out. In New York, I enjoy going to meetups like <a href = "http://www.meetup.com/NYC-rb/">NYC.rb</a> and <a href = "http://www.meetup.com/nycruby/">Ruby Roundtable</a> to meet fellow Rubyists and learn something new.</p>

<p>Then, graduation from the bootcamp happened and I found the opportunity to do something that I&rsquo;ve always wanted to do - go to a Ruby meetup in Japan. Ruby was developed by Yukihiro Matsumoto in Japan and I was curious to see if the Ruby community was different in its birthplace than it was here. The meetup I attended in Tokyo was <a href = "https://asakusarb.doorkeeper.jp/">asakusa.rb</a>. It&rsquo;s organized by Akira Matsuda who was very friendly and welcoming when I expressed an interest in attending the meetup (:</p>

<p>In a bit of a coincidence I had also just attended If Conference 2016 which was a tech conference related to NYC&rsquo;s Japanese startup scene. There, I learned that the startup scene in Japan is not huge and unlike Israel and NYC, the culture there is not so friendly towards startups. One particular talk I really enjoyed was Nulab&rsquo;s Masa about creating a startup community in Fukuoka and the challenges faced in doing so. His enthusiasm really made the talk! He also shared his experiences when organizing Myojowaraku which is a creative tech event in Fukuoka and I learned about the startup visa that Fukuoka recently introduced. So Fukuoka does seem to be more startup friendly. But overall, I got the impression that most people in Japan have a view that working at a startup does not show success as much as working in a big company and so, there is a smaller startup culture in Japan than here in New York. This was interesting to me as I felt a great deal of the Ruby on Rails jobs offered in NYC tend to be for startups.</p>

<p>Anyway so Tuesday night in Tokyo and I was in Shinjuku Electric Street ready to meet some people of Japan&rsquo;s Ruby community. The meetup started off with a programming session where everybody was working on their own projects. We had an introduction session where I was guided through making an origami Ruby. As seen from my photo above, my origami does need some work. Afterwards, we all went out for dinner (I&rsquo;ve been dreaming about the food ever since. One of my favourite things about visiting Tokyo has to be the food.) People were super friendly and did not seem to mind that my Japanese was practically non-existent. Some things I learned about Japan&rsquo;s tech scene was that Ruby is actually more popular than Python which was surprising to me. I was also told that most people that were using Ruby were also hobbyists. People there were amazingly welcoming to me and despite the language barrier, I feel a love of coding really does bring people together. I had an incredibly good time. I look forward to the next time I have another opportunity to visit and will hopefully be able to also bring a better understanding of Japanese (:</p>
]]></content>
  </entry>
  
</feed>
