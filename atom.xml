<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code n' Stuff]]></title>
  <link href="http://heatherlim.github.io/atom.xml" rel="self"/>
  <link href="http://heatherlim.github.io/"/>
  <updated>2016-10-10T22:30:31-04:00</updated>
  <id>http://heatherlim.github.io/</id>
  <author>
    <name><![CDATA[Heather Lim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Associations with ActiveRecord]]></title>
    <link href="http://heatherlim.github.io/blog/2016/10/10/associations-with-activerecord/"/>
    <updated>2016-10-10T04:58:48-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/10/10/associations-with-activerecord</id>
    <content type="html"><![CDATA[<p>This post is based on the models I made for my demo API from the last post.</p>

<p>I want to make an app where users can save recipes. They can then have many collections of recipes they can refer to. Let&rsquo;s call each of these collections a recipe box. Also, a recipe will have lots of different ingredients so a user can easily look up what kinds of ingredients they need to make that recipe.</p>

<p>Simple enough!</p>

<p>First, I want to model out how I want the data to be stored. There are a few things to think about when doing this. Let&rsquo;s use Twitter for example.</p>

<table>
  <tr>
    <th colspan="2" style="text-align:center">users</th>
  </tr>
  <tr>
    <th>id</th>
    <th>name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Amy</td>
  </tr>
  <tr>
    <td>2</td>
    <td>John</td>
  </tr>
</table>


<p>Let&rsquo;s pretend this is the users table for Twitter. I&rsquo;m modeling this out in Rails and it is convention to have a plural table name. We know that a user can have many tweets. How would be a good way to store it? What if we added multiple columns to the users table? Would that be a good way?</p>

<table>
  <tr>
    <th colspan="5" style="text-align:center">users</th>
  </tr>
  <tr>
    <th>id</th>
    <th>name</th>
    <th style="text-align:center">tweet_1</th>
    <th style="text-align:center">tweet_2</th>
    <th style="text-align:center">tweet_3</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Amy</td>
    <td>Hello world</td>
    <td>Wow another column</td>
    <td>Getting kinda crowded</td>
  </tr>
  <tr>
    <td>2</td>
    <td>John</td>
    <td>What happens if we have hundreds of tweets?</td>
    <td>This table will get ridiculously big.</td>
    <td>What's a better way to do this?</td>
  </tr>
</table>


<p>As you can see however, this isn&rsquo;t the best way to do things. Another solution would be to create a separate table for tweets.</p>

<table>
  <tr>
    <th colspan="2" style="text-align:center">tweets</th>
  </tr>
  <tr>
    <th>id</th>
    <th style="text-align:center">body</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Hello world</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Much better now</td>
  </tr>
  <tr>
    <td>3</td>
    <td>We can just add more rows</td>
  </tr>
</table>


<p>But how can we now associate this tweet table with the users? This is where a join table comes in. We are going to make a user_tweets table that will be our reference for which tweet belongs to which user.</p>

<table>
  <tr>
    <th colspan="3" style="text-align:center">user_tweets</th>
  </tr>
  <tr>
    <th>id</th>
    <th style="text-align:center">user_id</th>
    <th style="text-align:center">tweet_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>1</td>
    <td>3</td>
  </tr>
  <tr>
    <td>3</td>
    <td>2</td>
    <td>2</td>
  </tr>
</table>


<p>In this table, the user_id refers to the id of the user table. The tweet_id refers to the id of the tweet table. These are known as foreign keys because they are referencing a row in a different table. Reading this, we can see that Amy has two tweets - tweet with id 1 and tweet with id 3.</p>

<p>Just below, is a diagram of my ActiveRecord models for the demo API. I used the Rails ERD gem for this.</p>

<p><img src = "http://heatherlim.github.io/images/apidiagram.jpg" width = 500></p>

<p>As you can see, a recipe has many ingredients. Likewise, an ingredient will have many recipes. I&rsquo;ve joined these two tables together through a join table called recipe_ingredients. Just below, you can see how this kind of relationship is defined in your Rails model.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Recipe &lt; ActiveRecord::Base
</span><span class='line'>  has_many :recipe_box_recipes
</span><span class='line'>  has_many :recipe_boxes, through: :recipe_box_recipes
</span><span class='line'>  has_many :recipe_ingredients
</span><span class='line'>  has_many :ingredients, through: :recipe_ingredients
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class RecipeIngredient &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :recipe
</span><span class='line'>  belongs_to :ingredient
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Ingredient &lt; ActiveRecord::Base
</span><span class='line'>  has_many :recipe_ingredients
</span><span class='line'>  has_many :recipes, through: :recipe_ingredients
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>We use a has_many :through as our model Recipe is matched with the model Ingredient by going through RecipeIngredient. My recipe_ingredients table has a column for both recipe_id and ingredient_id and that is how the two models are connected.</p>

<p>It is a bit of a simpler association between a User and their RecipeBox. A recipe box can only have on user while a user can have many recipe boxes. For this, we will not need a join table. However, a recipe box can contain many recipes and a recipe can also have many recipe boxes. So, we will need a join table for that relation. Here, it is called RecipeBoxRecipe. RecipeBoxRecipe has a recipe_box_id and a recipe_id for its foreign keys.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class User &lt; ActiveRecord::Base
</span><span class='line'>  has_many :recipe_boxes
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class RecipeBox &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :user
</span><span class='line'>  has_many :recipe_box_recipes
</span><span class='line'>  has_many :recipes, through: :recipe_box_recipes
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class RecipeBoxRecipe &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :recipe_box
</span><span class='line'>  belongs_to :recipe
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Now that we have set up these associations, we will be able to call methods like user.recipe_boxes to see all the boxes a chosen user has. We can also choose a specific recipe box and call something like recipe_box.recipes to see all the recipes it contains. Something also interesting to note for Rails is that when we created our tables, we did not have to define which column will be a foreign key. Rails naturally recognizes that the foreign key will be the name of the model with _id added.</p>

<p>ActiveRecord also lets us easily save a row to a table by calling .save on the model.</p>

<p>Let&rsquo;s say we want to add something to a table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@post = Post.new
</span><span class='line'>@post.author = "Bob"
</span><span class='line'>@post.title = "Hello World"
</span><span class='line'>@post.description = "This is a post."
</span><span class='line'>@post.save</span></code></pre></td></tr></table></div></figure>


<p>Now we have a row that has both a recipe id and ingredient id of 1. Another way to do this is through what is known as mass assignment. This way, we can create this object with a parameter hash instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@post = Post.create(:author =&gt; "Bob", :title =&gt; "Hello World", :description =&gt; "This is a post.")</span></code></pre></td></tr></table></div></figure>


<p>Something to think about when using mass assignment are strong parameters. With mass assignment, you can run into the danger where users can modify data they should not be able to.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private
</span><span class='line'>
</span><span class='line'>def post_params
</span><span class='line'>  params.required(:post).permit(:author, :title, :description)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This way, the only params that can be modified are the author, title and description.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On RESTful APIs]]></title>
    <link href="http://heatherlim.github.io/blog/2016/10/10/on-restful-apis/"/>
    <updated>2016-10-10T04:10:00-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/10/10/on-restful-apis</id>
    <content type="html"><![CDATA[<p><strong>What is an API?</strong></p>

<p>API stands for Application Programming Interface.</p>

<p>It is an easy way for interacting with another application. For example, I could make a GET request to a website’s API and it would give me back data as a response. There are also other requests you can make to an API that are covered further down. The API is acting as the middle-man between the programmer and the application. The providers of the application’s service would give instructions on how to properly format the requests I make to the API and how I can interact with it. It’s a contract where the API will accept my request, and if it is allowed, will then process it. Having an API gives third-party developers an easy way to use a website’s services. Thus, we can use an existing web application for our own purposes.</p>

<p>For example, let’s say I want to make a web application that has a lot of pictures of cute animals. Where am I going to find all of these cute animals? While I could manually search for them and save them for my website, that seems like a hassle. Instead, I could make use of Reddit’s API to get these cute pictures. Reddit has a subreddit called /aww where users upload cute pictures of animals. I can make a GET request to Reddit’s API, and in return it could give me back a response (in this case, JSON) that contains information from the /aww subreddit including the images that users have been posting.</p>

<p>In this case:</p>

<p>GET <a href ="https://www.reddit.com/r/aww.json"><a href="https://www.reddit.com/r/aww.json">https://www.reddit.com/r/aww.json</a></a></p>

<p>If I make a GET request to this URL, I will get JSON back and from the response I get, I can also get all sorts of information to use on my cute animal website such as links to the pictures. This is easier than scraping the data directly from reddit.</p>

<p>Other examples of using an API could be to get back weather data. OpenWeatherMap has an API that let’s you easily get back information on the weather. To know which requests give back the responses you want, you can view their <a href="https://openweathermap.org/api">API docs</a>. In this case, you would need an API key to make requests. The key would help OpenWeatherMap control how their API is being used. One example could be limiting the number of requests you can make to the API within a certain amount of time.</p>

<p><strong>What is REST?</strong></p>

<p>REST stands for Representational State Transfer.</p>

<p>It is an architectural style that helps with communications between computer systems. It’s a stateless communications protocol as in the state of the client session is not stored server side and HTTP requests happen in isolation. This means that it’s only concern is when a request is made and it does not care for past requests. There are benefits of having a stateless transaction. For one thing, it reduces memory storage and it’s also easier to cache. As the client is not aware of the implementation, it’s also more scalable.</p>

<p>Generally, a RESTful service would be based on HTTP.</p>

<p><strong>RESTful API?</strong></p>

<p>Now, all of the previous examples of API calls are all known as RESTful APIs. Most RESTful APIs use HTTP requests, which are stateless. In the previous examples, I only showed one HTTP request method: GET.</p>

<p>However, there are more and they all do different things.</p>

<p>GET method requests data.</p>

<p>POST method submits data.</p>

<p>PATCH updates data.</p>

<p>DELETE deletes data.</p>

<p>There are more methods, but those are the main ones used. It should also be noted that not all HTTP methods are considered safe. Safe methods are those that do not modify data unlike methods such as - POST, PATCH, DELETE. It isn’t super common to allow unsafe methods because there could be repercussions when manipulating the resource especially if multiple people are doing so at the same time.</p>

<p><strong>Example API</strong></p>

<p>I made a simple demo API, you can see it <a href ="https://simpledemoapi.herokuapp.com/">HERE</a> and play around with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benefits of giving a Technical Presentation (some thoughts!)]]></title>
    <link href="http://heatherlim.github.io/blog/2016/08/16/summary-and-reflection-of-ruby-and-the-repository-pattern/"/>
    <updated>2016-08-16T16:21:55-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/08/16/summary-and-reflection-of-ruby-and-the-repository-pattern</id>
    <content type="html"><![CDATA[<figure align="center">
<img src = "http://heatherlim.github.io/images/nycrbpresentation.jpg" width = 500>
<figcaption><em>Getting ready.</em></figcaption>
</figure>


<p><br>
Last August, I had the amazing opportunity to give my first real technical presentation at NYC.rb! (Here&rsquo;s a <a href = "http://www.meetup.com/NYC-rb/events/230515892/"> link </a> to its event page). I learnt a lot, found a way to give back to the Ruby community, and had a great time.</p>

<p>This whole adventure started when I was exploring using the repository pattern in Ruby - a language whose ecosystem is very much centered around Rails (which does not use the repository pattern). So to aid further understanding of this pattern, I used a lesser-known framework, <a href = "http://hanamirb.org/">Hanami</a>, to show how it compares with Rails' ActiveRecord. While there are other ways to force the repository pattern on Rails such as <a href = "http://rom-rb.org/">ROM</a>, after reading a <a href = "http://solnic.eu/2016/05/22/my-time-with-rails-is-up.html"> blog post</a> by Piotr Solnica, I guess thoughts about the state of the Ruby ecosystem had been lingering in my mind. What is Ruby without Rails? After all, if someone is a Ruby developer, chances are that they are working in Rails. But if a better Rails alternative comes out then isn&rsquo;t written in Ruby, what is going to happen to the Ruby language? Is Ruby&rsquo;s future too dependent on Rails? With these thoughts in mind, I thought it would be fun and educational to learn a new framework. And what better way to solidify learning something new then to give a technical talk?</p>

<p>From experience, I&rsquo;ve found explaining a concept to someone is a great way to test if you have truly understood what you had been learning. By explaining it to someone else, it forces your perspective on the concept to change - from &ldquo;just making it work&rdquo; to truly understanding why it works that way. It changes your priority. It&rsquo;s easy to copy + paste that piece of code from Stack Overflow to just make your app work but after all, I&rsquo;m learning to be a full-stack developer, not a full-stack-overflow developer. This technical talk was my way of challenging myself to pause for a moment and reflect on why does Rails use ActiveRecord and what are some alternatives to this architectural pattern? In the end, not only would I learn something but I&rsquo;ll also be sharing knowledge. So it is a win/win on both sides.</p>

<p>The experience of giving a talk really was a great learning experience. I felt I understood the concepts I was talking about a lot deeper than simply just knowing how to implement them. I became more aware of the different kinds of knowledge that exist. Implementing something is different from understanding it. But to implement something <em>well</em>, requires you to really understand what is going on. It gives you choice. When you understand something, you&rsquo;ll be able to choose the right tool for the job and make an informed decision. This is an important skill to have as a developer when you are faced with many different kinds of applications that might not fit the Rails model well.</p>

<p>Another benefit in giving a technical presentation is that it helps contribute to the community. I love the Ruby community. It was incredibly friendly when I first started learning and I always felt welcome at meetups no matter my skill level. I learnt so much from more experienced developers. Giving a talk is in a way giving back and hopefully somebody does learn something new in turn.</p>

<p>Finally, while this does not directly relate to programming, giving this presentation helped me gain confidence. I was very nervous initially and struggled a lot with imposter syndrome. Could someone really learn something from me? As much as I felt this talk was a challenge to myself to really understand the tools I was working with, it was also a  personal challenge. Simply, could I do it? It&rsquo;s tough when it is your first time getting up in front of an audience of developers, live coding, and then taking questions at the end. It really tests both your technical knowledge and your ability to keep calm under pressure (especially if you had never done something like this before). But all in all, it helped me to be more confident in myself and my efforts. It&rsquo;s something that I would definitely love to do again.</p>

<p>So to sum up: <br>
1) Giving a presentation helps you learn<br>
2) It gives back to the community<br>
3) It helps build confidence<br>
4) It&rsquo;s a lot of fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Ruby Meetup in Japan]]></title>
    <link href="http://heatherlim.github.io/blog/2016/06/23/my-first-ruby-meetup-in-japan/"/>
    <updated>2016-06-23T21:19:22-04:00</updated>
    <id>http://heatherlim.github.io/blog/2016/06/23/my-first-ruby-meetup-in-japan</id>
    <content type="html"><![CDATA[<figure align="center">
<img src = "http://heatherlim.github.io/images/rubyorigami.jpg">
<figcaption><em>I definitely need to brush up my origami skills! (I made the one on the left).</em></figcaption>
</figure>


<p><br>
This post is a bit of a train of thought. I graduated from a coding bootcamp back in December and I&rsquo;m now two months into work life. It was just natural for me to start looking back and reflecting on how my programming journey first began even though I know it is still the beginning!</p>

<p>So, coming from a bootcamp, Ruby is my first programming language. I think one of my favourite things about it is the amazing community. There&rsquo;s a saying &ldquo;Matz is nice so we are nice&rdquo;. I loved the feeling about it. It was so positive and I felt it mirrored this love of programming and learning I had that eventually compelled me to sign up for a coding bootcamp. But as someone that started learning at a bootcamp, I dealt with imposter syndrome. Did I dupe my way past admissions? Do I really belong in the programming world? I did not major in computer science in college. But when I began to embrace this struggle and recognize that yes, learning to code is hard, I began to relax and keep myself open to learning. It was not as though I wasn&rsquo;t trying hard to learn, but it seemed that my own anxiety and worry kept me from realizing that this struggle is normal and had nothing to do with my fear that perhaps I was just incapable of learning to code. I also began to get involved in the Ruby community and attending local meetups. People are very friendly and willing to help out. In New York, I enjoy going to meetups like <a href = "http://www.meetup.com/NYC-rb/">NYC.rb</a> and <a href = "http://www.meetup.com/nycruby/">Ruby Roundtable</a> to meet fellow Rubyists and learn something new.</p>

<p>Then, graduation from the bootcamp happened and I found the opportunity to do something that I&rsquo;ve always wanted to do - go to a Ruby meetup in Japan. Ruby was developed by Yukihiro Matsumoto in Japan and I was curious to see if the Ruby community was different in its birthplace than it was here. The meetup I attended in Tokyo was <a href = "https://asakusarb.doorkeeper.jp/">asakusa.rb</a>. It&rsquo;s organized by Akira Matsuda who was very friendly and welcoming when I expressed an interest in attending the meetup (:</p>

<p>In a bit of a coincidence I had also just attended If Conference 2016 which was a tech conference related to NYC&rsquo;s Japanese startup scene. There, I learned that the startup scene in Japan is not huge and unlike Israel and NYC, the culture there is not so friendly towards startups. One particular talk I really enjoyed was Nulab&rsquo;s Masa about creating a startup community in Fukuoka and the challenges faced in doing so. His enthusiasm really made the talk! He also shared his experiences when organizing Myojowaraku which is a creative tech event in Fukuoka and I learned about the startup visa that Fukuoka recently introduced. So Fukuoka does seem to be more startup friendly. But overall, I got the impression that most people in Japan have a view that working at a startup does not show success as much as working in a big company and so, there is a smaller startup culture in Japan than here in New York. This was interesting to me as I felt a great deal of the Ruby on Rails jobs offered in NYC tend to be for startups.</p>

<p>Anyway so Tuesday night in Tokyo and I was in Shinjuku Electric Street ready to meet some people of Japan&rsquo;s Ruby community. The meetup started off with a programming session where everybody was working on their own projects. We had an introduction session where I was guided through making an origami Ruby. As seen from my photo above, my origami does need some work. Afterwards, we all went out for dinner (I&rsquo;ve been dreaming about the food ever since. One of my favourite things about visiting Tokyo has to be the food.) People were super friendly and did not seem to mind that my Japanese was practically non-existent. Some things I learned about Japan&rsquo;s tech scene was that Ruby is actually more popular than Python which was surprising to me. I was also told that most people that were using Ruby were also hobbyists. People there were amazingly welcoming to me and despite the language barrier, I feel a love of coding really does bring people together. I had an incredibly good time. I look forward to the next time I have another opportunity to visit and will hopefully be able to also bring a better understanding of Japanese (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Practice: Life and Death of a Cell (Conway's Game of Life)]]></title>
    <link href="http://heatherlim.github.io/blog/2016/03/06/tdd-practice-in-java-with-conways-game-of-life/"/>
    <updated>2016-03-06T23:18:22-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/03/06/tdd-practice-in-java-with-conways-game-of-life</id>
    <content type="html"><![CDATA[<p>I got a bit more practice since my last post on just barely touching IntelliJ. I&rsquo;m currently working on implementing Conway&rsquo;s Game of Life in Java and I decided to use TDD to help me along the process. I like how it helps me to think on the design of my code. And that I can be sure new methods I write don&rsquo;t break my previous ones. Right now, I&rsquo;m going to walk through the process of the cell logic in the Game of Life.</p>

<p><strong>Rules (Taken from Wikipedia)</strong><br>
1) Any live cell with fewer than two live neighbours dies, as if caused by under-population.<br>
2) Any live cell with two or three live neighbours lives on to the next generation.<br>
3) Any live cell with more than three live neighbours dies, as if by over-population.<br>
4) Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>

<p>The first test I decided to write was that a cell&rsquo;s initial state would be dead. (Something nice about using IntelliJ was that it would help auto-import libraries and the auto-completion is really convenient. Also, clicking option+enter brings up available suggestions to fix an error in your code.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class CellTest {
</span><span class='line'>    @Test
</span><span class='line'>    public void InitialStateisDead() {
</span><span class='line'>        Cell cell = new Cell();
</span><span class='line'>        Assert.assertEquals(cell.getState(), false);
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This test would automatically fail. Which is what we expected. The next step is to pass this test in the absolute simplest way. So to make this test pass, we would just make the method state return false.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cell {
</span><span class='line'>     public boolean getState(){
</span><span class='line'>       return false;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Great, so now we have all our tests passing. But what happens if the state of our cell is alive? We need to write a test that can check that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>    public void CellStateCanChange(){
</span><span class='line'>      Cell changeCellAlive = new Cell();
</span><span class='line'>        changeCellAlive.changeState();
</span><span class='line'>        Assert.assertEquals(changeCellAlive.getState(), true);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>The test right now is failing. We need to write a changeState method which is missing right now. While it should make the state of our cell toggle, we are going one small step at a time. I made an instance variable that returns false and made it so our method state would be returning that variable. So the simplest way to just make the test pass would be for changeState to just set the state of the cell as true as you can see in line 7.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cell {
</span><span class='line'>    private boolean state = false;
</span><span class='line'>    public boolean getState(){
</span><span class='line'>       return state;
</span><span class='line'>    }
</span><span class='line'>    public void changeState() {
</span><span class='line'>        state = true;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now however, we want to see if a cell can change from alive to dead. We will write a test that will try to change the state of an alive cell and the state should return false. Of course the test will fail as right now, changeState can only make the state change to true, not false.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>public void CellStateCanChange(){
</span><span class='line'>  Cell changeCellAlive = new Cell();
</span><span class='line'>  changeCellAlive.changeState();
</span><span class='line'>  Cell changeCellDead = new Cell();
</span><span class='line'>  changeCellDead.changeState();
</span><span class='line'>  changeCellDead.changeState();
</span><span class='line'>  Assert.assertEquals(changeCellAlive.getState(), true);
</span><span class='line'>  Assert.assertEquals(changeCellDead.getState(), false);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>To make this test pass, I am going to edit the changeState method. It will check the state of the cell and be able to toggle it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cell {
</span><span class='line'>  private boolean state = false;
</span><span class='line'>  public boolean getState(){
</span><span class='line'>     return state;
</span><span class='line'>  }
</span><span class='line'>  public void changeState() {
</span><span class='line'>     state = !state;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The test passes now. I want to start incorporating some of the rules of Conway&rsquo;s Game of Life. Namely, the condition where a cell can live onto the next stage. A cell that has two or three neighbours will be able to live onto the next generation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>   public void CanLiveOnToNextStage(){
</span><span class='line'>     Cell cell = new Cell();
</span><span class='line'>       Cell cell2 = new Cell();
</span><span class='line'>       cell2.nextState(3);
</span><span class='line'>       cell.nextState(2);
</span><span class='line'>       Assert.assertEquals(cell.getNextState(), true);
</span><span class='line'>       Assert.assertEquals(cell.getNextState(), true);
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<p>To make the test pass, I&rsquo;ll create the method getNextState and nextState. nextState determines what the cell&rsquo;s next state is. It will accept an integer as an argument. The integer is meant to represent the number of neighbours that the cell has. getNextState will be retrieving what the next state is.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cell {
</span><span class='line'>    private boolean state = false;
</span><span class='line'>    private boolean nextState = false;
</span><span class='line'>    public boolean getState(){
</span><span class='line'>       return state;
</span><span class='line'>    }
</span><span class='line'>    public void changeState() {
</span><span class='line'>        state = !state;
</span><span class='line'>    }
</span><span class='line'>    public boolean getNextState(){
</span><span class='line'>        return nextState;
</span><span class='line'>    }
</span><span class='line'>    public void nextState(int i) {
</span><span class='line'>        if(i == 2 || i == 3){
</span><span class='line'>            nextState = true;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now that the tests pass, I&rsquo;m going to move onto other tests that see what situations a cell wouldn&rsquo;t be living onto the next generation. Let&rsquo;s do under-population. If a live cell has fewer than two live neighbours, it will die. By default however, because our nextState is set to false, our tests should pass automatically. But as we want the tests to fail, I set the next state to have neighbours of 3 first. Then, I set it to lower numbers. To clarify, let&rsquo;s say I did not previously set the state of the neighbours to have 3 first. Then I would end up with a test like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>    public void WillDieOfUnderpopulation(){
</span><span class='line'>        Cell noNeighbourCell = new Cell();
</span><span class='line'>        Cell oneNeighbourCell = new Cell();
</span><span class='line'>        noNeighbourCell.nextState(0);
</span><span class='line'>        oneNeighbourCell.nextState(1);
</span><span class='line'>        Assert.assertEquals(noNeighbourCell.getNextState(), false);
</span><span class='line'>        Assert.assertEquals(oneNeighbourCell.getNextState(), false);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>These tests would actually be passing. But that would be an inaccurate reflection of what I want the code to do. I need the tests to fail so I can edit the code to account for that. After all, the next state of a cell is by default always going to be false. I will have to write something to make it true and see if it can change to false. So notice the two extra lines I write on the test below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>    public void WillDieOfUnderpopulation(){
</span><span class='line'>        Cell noNeighbourCell = new Cell();
</span><span class='line'>        Cell oneNeighbourCell = new Cell();
</span><span class='line'>        noNeighbourCell.nextState(3);
</span><span class='line'>        noNeighbourCell.nextState(0);
</span><span class='line'>        oneNeighbourCell.nextState(3);
</span><span class='line'>        oneNeighbourCell.nextState(1);
</span><span class='line'>        Assert.assertEquals(noNeighbourCell.getNextState(), false);
</span><span class='line'>        Assert.assertEquals(oneNeighbourCell.getNextState(), false);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>To pass this, I just need to fill in the else statement of our nextState method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void nextState(int i) {
</span><span class='line'>        if(i == 2 || i == 3){
</span><span class='line'>            nextState = true;
</span><span class='line'>        } else {
</span><span class='line'>            nextState = false;
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>I continue to test in this manner. I get the test to pass then I think of more specific scenarios to test to get the test to fail and then I go back to refine the code more. I still need to write the tests for what happens in the event of over-population and how reproduction works.</p>

<p>I also decided to go back to refactor a bit. I began to think that holding the next state of my cell in a variable is a little unnecessary. I delete my getState method as well as the variable. Instead, these are what my methods look like now:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cell {
</span><span class='line'>    private boolean state = false;
</span><span class='line'>    public boolean getState(){
</span><span class='line'>       return state;
</span><span class='line'>    }
</span><span class='line'>    public void changeState() {
</span><span class='line'>        state = !state;
</span><span class='line'>    }
</span><span class='line'>    public boolean nextState(int i) {
</span><span class='line'>        if(i == 2 || i == 3){
</span><span class='line'>            return true;
</span><span class='line'>        } else {
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    public void next(int i) {
</span><span class='line'>        if(state != this.nextState(i)){
</span><span class='line'>            this.changeState();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I do change the tests a little to reflect this change. Some methods after all are now accepting arguments. It does show my tests could have been testing too much and were a little brittle. Generally, I would not want to change my tests to account for this refactoring. This project is still a work in progress but it feels good to familiarise myself with Java, an IDE as well as testing. The final product will also use the Slick2D library for drawing out this game. I might do another separate blog post on how to integrate it with IntelliJ. While Maven did a lot of it for me, there were some native dependencies that were missing and I had to manually put them in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World in IntelliJ - First Experience with an IDE]]></title>
    <link href="http://heatherlim.github.io/blog/2016/03/04/hello-world-in-intellij-first-experience-with-an-ide/"/>
    <updated>2016-03-04T01:28:57-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/03/04/hello-world-in-intellij-first-experience-with-an-ide</id>
    <content type="html"><![CDATA[<p>I come from a coding bootcamp background (I attended Flatiron School). Being in the web development class, my first language was Ruby and my coding environment was pretty much just Sublime Text (though more recently Atom). With Ruby as a first language, IDEs can seem to be pretty alien. What&rsquo;s the point? Isn&rsquo;t everything I need just in a simple text editor? These are the questions I had when Ruby was the only language I knew. While there are Ruby IDEs out there, you can get by with no trouble just using a text editor.</p>

<p>I ran into my first feeling that I needed an IDE when I started learning Java. It was very different from Ruby. I needed to get used to a static language. Arrays that needed to know what size they were, variables to be declared and remembering to compile a program before running it. I admit that my first Java program (a simple shopping cart reader that would get its input from a text file and give a receipt as an output after calculating item totals and tax) was programmed entirely on sublime and while coding, I kept thinking - This feels a lot harder than it should be. After the horrified look I got from a friend when I mentioned I was coding Java on a text editor, he recommended IntelliJ as an IDE to use. And that is where I am now.</p>

<p>So to start off&hellip; what is an IDE?</p>

<p>IDE stands for Integrated Development Environment. IntelliJ doesn&rsquo;t just give a platform for writing code on, but it also contains a compiler, built-in debugging (way better than my beloved binding.pry), and a very helpful autocomplete.</p>

<p>This all seems great!</p>

<p>One of my main issues from my first Java program was just forgetting to compile and so on&hellip; it was an extra step that I didn&rsquo;t need to do with Ruby. However, just getting started on an IDE having never encountered one before has led me to see that there is a learning curve. With a text editor, I could hit the ground running and immediately start writing code. But there is some familiarity that needs to be developed with an IDE and learning one is a challenge in and of itself.</p>

<p>As you can see from the title of this blog post, this is just a simple guide on creating a Hello World program with IntelliJ. (The pictures might look a little bit small but they expand if you click on them.) This post also helps me document my learning progress.</p>

<p>Step 1: Create a new project</p>

<p>When you open up IntelliJ, click on the option to make a new project.</p>

<center>
<img src="http://heatherlim.github.io/images/intellij1.png" width = 400>
</center>


<p>Step 2: Navigate through the options and select the command line app template.</p>

<p>Once you&rsquo;ve clicked new project, you are given the option to include additional libraries and frameworks. If you click next (because we&rsquo;re not using any), you&rsquo;ll get to the template selection page. We&rsquo;re just making a hello world program so we&rsquo;ll just pick the command line app template.</p>

<center>
<img src="http://heatherlim.github.io/images/intellij2.png" width = 400><img src="http://heatherlim.github.io/images/intellij2a.png" width = 400>
</center>


<p>Step 3: Name the project and choose its location</p>

<p>I already had a folder called HelloWorld made.</p>

<center>
<img src="http://heatherlim.github.io/images/intellij3.png" width = 400>
</center>


<p>Step 4: Write the code</p>

<p>Selecting the command line template makes the public static void appear automatically. So we just need to fill in the rest. While writing, it was nice to see the auto-complete. It&rsquo;s helpful to be able to see the methods you have available to you.</p>

<center>
<img src="http://heatherlim.github.io/images/intellij4.png" width = 400>
</center>


<p>Step 5: Running the code</p>

<p>To run the code and see &ldquo;hello world!&rdquo; printed out, we just need to hit the green triangle on the top right of the window.</p>

<center>
<img src="http://heatherlim.github.io/images/intellij5.png" width = 400>
</center>


<p>And there you have it, my first attempt at trying to familiarize myself a little bit with the absolute basics of IntelliJ before really diving into it. It was definitely a little strange for me at first, coming over from Ruby for the need of an IDE. But I can already tell that if I had written my Java shopping cart reader with IntelliJ, it would have saved me a lot of time in the long run. Overall, I can tell that using an IDE is a lot more powerful but it does have a steeper learning curve when compared to the text editors that I am more familiar with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Forays with Gosu - That One Bouncing DvD Logo]]></title>
    <link href="http://heatherlim.github.io/blog/2016/03/03/first-forays-with-gosu-that-one-dvd-logo-bouncing-on-the-tv-screen-thing/"/>
    <updated>2016-03-03T22:27:11-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/03/03/first-forays-with-gosu-that-one-dvd-logo-bouncing-on-the-tv-screen-thing</id>
    <content type="html"><![CDATA[<p>During my free time, I&rsquo;ve been working my way through <strong>Learn Game Programming with Ruby </strong>. It&rsquo;s a pretty fun book and can be picked up: <a href = 'https://pragprog.com/book/msgpkids/learn-game-programming-with-ruby'>HERE</a></p>

<p>It uses Ruby and the Gosu 2D game library which makes making simple games pretty easy. I&rsquo;ve just made my way through the first four chapters which walks you through the creation of a whack-a-mole game (except you are trying to hit a blinking bouncing ruby). It goes through animating your images, keeping score, and how to make a time limit for your game. I really recommend the book so far if you&rsquo;re just starting out with Ruby and looking for something fun and simple.</p>

<p>Having finished the first project in the book, I decided to do some quick review on what I have learned with Gosu and make that one bouncing DvD logo thing. You know, the one you keep watching to see if it hits the corner of the TV?</p>

<p>If you&rsquo;re still not sure, check out this clip from The Office that explains it all:</p>

<center>
<iframe width="420" height="315" src="https://www.youtube.com/embed/SmFEK2gq4QQ" frameborder="0" allowfullscreen></iframe>
</center>


<p>Here&rsquo;s a gif that shows what my final product looks like:<br><br></p>

<center>
<img src="http://heatherlim.github.io/images/finishedDvD.gif">
</center>


<p>Note that the actual program runs smoothly. It&rsquo;s just a bad gif that is not in a perfect loop so the frame rate is terrible.</p>

<p>First things first, we are going to have to make a window appear. To do this, we are going to start off by making a subclass of Gosu::Window. In our initialize method, we are also going to tell Gosu what size we want our window to be. So we use super to pass in the dimensions of the window. Notice that right at the bottom when we call the show method? We didn&rsquo;t write a method called show but it is included in Gosu.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'gosu' # Remember to require gosu!
</span><span class='line'>
</span><span class='line'>class BounceDvD &lt; Gosu::Window
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    super(800, 600)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>window = BounceDvD.new
</span><span class='line'>window.show</span></code></pre></td></tr></table></div></figure>


<p>Right now, when we run the program, a blank window should appear. For the next thing, let&rsquo;s draw the image of the DvD logo onto the window. So we are going to add a draw method to our code. In the draw method, the first two arguments are going to be the x and y axis our image is going to be placed on. If you look below, we can see that Gosu is going to place our logo 30 px from the left and 30 px from the top (It measures this from the top left of our image, not from image center). The third argument is the z-axis. For example, if we had another logo with a higher z, it will be layered on top of our original logo. Finally, the other two arguments is the scale for x and y. Because the picture I picked has a pretty big size, I needed to scale it down so that it would fit in the window.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'gosu'
</span><span class='line'>
</span><span class='line'>class BounceDvD &lt; Gosu::Window
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    super(800, 600)
</span><span class='line'>    @image = Gosu::Image.new('dvdVideo.png')
</span><span class='line'>    @x = 30
</span><span class='line'>    @y = 30
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def draw
</span><span class='line'>    @image.draw(@x, @y, 1, 0.4, 0.4)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>window = BounceDvD.new
</span><span class='line'>window.show</span></code></pre></td></tr></table></div></figure>


<p>Once we run that code above, we should open up a window and we can see the DvD logo.</p>

<center>
<img src="http://heatherlim.github.io/images/stillDvD.png" width = 400>
</center>


<p>Next, we are going to try to move the logo. To do this, we are going to fill up the update method. In our initialize method, we are going to create two more variables for velocity. It will determine how much our logo will be moving. Then, in update, we will add the velocity numbers to our current x and y value. Basically, the logo&rsquo;s position in the window will be continuously updating by however much the velocity is.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'gosu'
</span><span class='line'>
</span><span class='line'>class BounceDvD &lt; Gosu::Window
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    super(800, 600)
</span><span class='line'>    @image = Gosu::Image.new('dvdVideo.png')
</span><span class='line'>    @x = 30
</span><span class='line'>    @y = 30
</span><span class='line'>    @velocity_x = 5
</span><span class='line'>    @velocity_y = 5
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def draw
</span><span class='line'>    @image.draw(@x, @y, 1, 0.4, 0.4)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def update
</span><span class='line'>    @x += @velocity_x
</span><span class='line'>    @y += @velocity_y
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>window = BounceDvD.new
</span><span class='line'>window.show</span></code></pre></td></tr></table></div></figure>


<p>However, here we are going to run into a problem. We want our logo to bounce on the screen once it meets the edge. Our program right now is always adding the velocity to our logo&rsquo;s position so it will eventually just move off the edge of the screen like so.</p>

<center>
<img src="http://heatherlim.github.io/images/offtheedge.gif">
</center>


<p>To fix this, our velocity will have to become negative once it hits an edge. That way, it will bounce back instead of continuing onwards. Whenever the logo hits an edge, we want it to reverse directions. We can tinker around with the update method even more and get this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def update
</span><span class='line'>    @x += @velocity_x
</span><span class='line'>    @y += @velocity_y
</span><span class='line'>    if @x &gt; 800 || @x &lt; 0
</span><span class='line'>      @velocity_x *= -1
</span><span class='line'>    end
</span><span class='line'>    if @y &gt; 600 || @y &lt; 0
</span><span class='line'>      @velocity_y *= -1
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>The numbers of 800 and 600 come from the window size we had defined in the initialize method. And we also have @x &lt; 0 and @y &lt; 0 to make sure it will bounce on all edges. The velocity gets reversed by multiplying it by -1 to create the bounce. The following gif illustrates the result:</p>

<center>
<img src="http://heatherlim.github.io/images/clipping.gif">
</center>


<p>It still isn&rsquo;t quite right. Remember that our image&rsquo;s placement in the window is decided by its upper left corner? So notice that in the gif, it actually only bounces on that corner. So while the left and top part of the window looks okay, the bottom and right side shows the logo clipping out of the window&rsquo;s view. It isn&rsquo;t what we want. We would like it to actually bounce on the logo&rsquo;s right side, not just its corner. We can do a little maths and fix this by expanding on the if statement in the update method. Our image size is 120 x 120 so if we subtract the window&rsquo;s size by that amount, we should be able to find when the logo should bounce. Like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def update
</span><span class='line'>    @x += @velocity_x
</span><span class='line'>    @y += @velocity_y
</span><span class='line'>    if @x &gt; 800 || @x &lt; 0 || @x &gt; 800 - 120
</span><span class='line'>      @velocity_x *= -1
</span><span class='line'>    end
</span><span class='line'>    if @y &gt; 600 || @y &lt; 0 || @y &gt; 600 - 120
</span><span class='line'>      @velocity_y *= -1
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p><br>
And great! The result should now be bouncing on the edge of the logo. It was a really quick and easy exercise. The full code can be seen: <a href = 'https://github.com/heatherlim/bouncingdvdtest'> HERE </a></p>

<p>Hopefully this demonstrates how easy it is to get started with gosu and animating with Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Calculator, Order of Operations, and Polish Notation]]></title>
    <link href="http://heatherlim.github.io/blog/2016/02/28/simple-calculator-and-polish-notation/"/>
    <updated>2016-02-28T13:18:40-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/02/28/simple-calculator-and-polish-notation</id>
    <content type="html"><![CDATA[<p>One of the very first exercises I did as a coding exercise was creating a simple (and crappy) calculator. It was very basic and did not need to consider order of operations. Below is a really basic example of what I mean:</p>

<script> 
$(function(){
  var calculator = new Calculator();// write your solution here.
});
// classes are dots and ids are #
function Calculator(){
  // This is a listener that listens for everryyy button click
  $('button').click(function(){
    // Now when a button is clicked, we are in a scope deeper than window
    // So when we call "this" we will get whatever button was clicked
    // Instead of getting the window
    if($(this).siblings('#result').length){
      var number1 = $('#number1 > .number').text()
      var number2 = $('#number2 > .number').text()
      var operation = $('#operation').text()
      var answer = eval([number1,operation,number2].join(''))
      $('#result').text(answer)   
    }else if(!$(this).siblings('#operation').length){    
      var oldValue = $(this).siblings('h2').text()
      var newValue = eval(oldValue + $(this).text() + 1)
      $(this).siblings('h2').text(newValue)
    } else if ($(this).siblings('#operation').length > 0) {
      $(this).siblings('h2').text($(this).text())      
    }
  })
}
</script>




<table border = 1 width = 600>
<tr>
  <td>
    <div id="number1">
    <h2 class="number">0</h2>
    <button class="incr" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">+</button>
    <button class="decr" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">-</button>
    </div>
  </td>
  <td>
    <div>
    <h2 id="operation">+</h2>
    <button id="add" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">+</button>
    <button id="sub" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">-</button>
    <button id="mult" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">*</button>
    <button id="div" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">/</button>
  </div>
  </td>
  <td>
    <div id="number2">
    <h2 class="number">0</h2>
    <button class="incr" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">+</button>
    <button class="decr" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">-</button>
    </div>
  </td>
  <td>
     <h2 id="result">0</h2>
      <button id="equals" style ="background-color: white; border: none; height: 17px; width: 17px; font-size: 16px; text-align: center;">=</button>
  </td>
</tr>
</table>


<p>But what if you wanted to calculate using more than one operation? Or be even more flexible and let a user pass in a string to calculate? In this situation, order of operations becomes something to take note of. When researching this, I stumbled upon polish notation (also called prefix notation) and the use of stacks as a solution to this problem.</p>

<p>Polish notation is a different way to write arithmatic. The operator is placed to the left of the operand. This was initially strange to me because I was used to infix notation. In infix, we place the operator in between the operands we are calculating. I did not realize there was any other way and infix was the most intuitive to me. It&rsquo;s the more conventional way we read expressions.</p>

<p>An example of infix:<br>
2 + 3</p>

<p>An example of prefix:<br>
+ 2 3</p>

<p>While infix might be easier for me to read, I found that when trying to make a calculator, prefix was easier for a computer. One reason is that the rules of order of operations becomes unnecessary with prefix. When trying to calculate infix, there are a lot of rules to keep in mind.</p>

<p>For example:<br>
(5 - 6) * 7</p>

<p>We need to evaluate what is within the parenthesis first. Also, if there were no parenthesis, we would have to calculate 6 * 7 first as multiplication comes before subtraction. Parenthesis are very necessary in infix as they can change what an expression evaluates to with removal.</p>

<p>The same expression however, when written in prefix does not need parenthesis:<br>
* - 5 6 7</p>

<p>The order in which a prefix is calculated is always going to be conveyed by how it is arranged. All prefix expressions are calculated in the same way. To further elaborate:</p>

<p>With infix, finding the innermost expression to calculate first is difficult. It requires a lot of jumping around in the expression. <br>
((15 / (7 - (1 + 1))) * 3) - (2 + (1 + 1))</p>

<p>But if it was written in prefix:<br>
- * / 15 - 7 + 1 1 3 + 2 + 1 1</p>

<p>This prefix expression is calculated in the same way that our previous simple example (+ 2 3) is calculated. We do not even need to memorize the order of operations. Example below on what I mean.</p>

<p>Calculating Prefix Step by Step:<br>
- Read from right to left<br>
- Look for two operands and their operator and evaluate them</p>

<p>- * / 15 - 7 + 1 1 3 + 2 <strong>+ 1 1</strong></p>

<p>Now we can evaluate them:<br>
- * / 15 - 7 + 1 1 3 + 2 <strong>2</strong></p>

<p>Repeat:<br>
- * / 15 - 7 + 1 1 3 4</p>

<p>Our next two operands and operators are selected again. From right to left, the two operands next to their operator will be:<br>
- * / 15 - 7 <strong>+ 1 1</strong> 3 4<br>
<em>(As you can see, from this example, just calculating prefix in this way does not need a knowledge of order of operations&hellip; there&rsquo;s no jumping around in an expression. You just have to follow <strong> one </strong> rule)</em></p>

<p>This is what we have now:<br>
- * / 15 <strong>- 7 2</strong> 3 4<br>
We can see the next two to caclulate is - 7 2&hellip; and so on&hellip;<br>
- * <strong>/ 15 5 </strong>3 4 <br>
- <strong>* 3 3</strong> 4 <br>
- 9 4 <br>
And now&hellip;<br>
The answer is <strong> 5 </strong></p>

<p>I wrote a program in Ruby that calculates prefix. Here&rsquo;s a snippet of a part of its code (the other methods I didn&rsquo;t include because I felt they were self-explanatory):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def calculate_prefix
</span><span class='line'>  stack = []
</span><span class='line'>  # @arg is the prefix expression
</span><span class='line'>  loopSize = @arg.count
</span><span class='line'>    for i in 0..loopSize
</span><span class='line'>    value = @arg.pop
</span><span class='line'>      if operand?(value)
</span><span class='line'>        stack &lt;&lt; value
</span><span class='line'>      elsif operator?(value)
</span><span class='line'>        operator1 = stack.pop
</span><span class='line'>        operator2 = stack.pop
</span><span class='line'>        stack &lt;&lt; compute(value, operator1, operator2)
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>    stack.compact.first
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>Notice I am making an array called stack. In Ruby, an array can pretty much function as a stack. In other languages, there is an actual stack datatype. Stack is a last-in-first-out data structure. You can make a Ruby implementation of a stack which RubyMonk demonstrates <a href = "https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/33-advanced-arrays/lessons/86-stacks-and-queues">HERE</a>.</p>

<p>Basically the last thing I push into a stack will be the first thing I can pull out. So if using a Ruby array, there are just two array methods I would use to simulate a stack. As demonstrated below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># adding to a stack
</span><span class='line'>  stack &lt;&lt; something
</span><span class='line'># retrieving from a stack
</span><span class='line'>  stack.pop</span></code></pre></td></tr></table></div></figure>


<p>You can tell I used both of those in my calculating prefix method.</p>

<p>So an explanation of my method:
I&rsquo;m reading the prefix expression from right to left, popping a value from it. If the value is an operand, I will be pushing it onto my stack. Otherwise, if it is an operator, I&rsquo;ll pop the first two elements in my stack and compute them before pushing them to the stack again.</p>

<p>You can tell this is a lot easier than if I were to calculate infix directly.</p>

<p>Prefix might not be the easiest way for me to read an expression but it makes it easier for me to deal with coding a simple calculator. It&rsquo;s convenience over convention.</p>

<p>Reference:<br>
<a href="https://en.wikipedia.org/wiki/Polish_notation"><a href="https://en.wikipedia.org/wiki/Polish_notation">https://en.wikipedia.org/wiki/Polish_notation</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some TDD Practice]]></title>
    <link href="http://heatherlim.github.io/blog/2016/02/22/some-tdd-practice/"/>
    <updated>2016-02-22T13:28:26-05:00</updated>
    <id>http://heatherlim.github.io/blog/2016/02/22/some-tdd-practice</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m going to be practicing my TDD by implementing a set in Ruby using arrays. While the Set class in Ruby uses hashes as storage for various reasons, this is just for practicing a TDD way of coding and also practice for writing tests in RSpec. So I&rsquo;m not trying to demonstrate a great way of implementing sets or that this is a better way to do sets (spoiler: It&rsquo;s really not).</p>

<p><strong>Some things to know about Sets:</strong>
<br>
- Order doesn&rsquo;t matter (unordered)
<br>
- Contains unique values</p>

<p>So the TDD steps&hellip; you would want to write tests first and let that guide how you write your code. You would first write a simple test, run it, see it fail and then write minimal code to make it pass (The simplest way you can make it pass). Then you move on to write the next test.</p>

<p>First things first, we are going to write a test. We are going to say what the test is describing. It will be something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Set do
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Now we are going to think about what kind of method we want the set to have.</p>

<p>For a quick example, let&rsquo;s say you want to convert the set into an array. So we are going to write a test for that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Set do
</span><span class='line'>
</span><span class='line'>  describe "#to_array" do
</span><span class='line'>      it "returns an array of all elements in the set" do
</span><span class='line'>        @set = Set.new([1])
</span><span class='line'>        expect(@set.to_array).to contain_exactly(1)
</span><span class='line'>      end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Note: This test is failing</p>

<p><img src="http://heatherlim.github.io/images/testfail.png"></p>

<p>(You can ignore the number &ldquo;3)&rdquo; there. I screenshotted the fail message only after I finished this exercise so I already have a couple tests written)</p>

<p>As we haven&rsquo;t really written anything, the test will fail when we run it which is exactly what we want. Now we have to write some code to make the test pass.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Set
</span><span class='line'>
</span><span class='line'>  def initialize(array)
</span><span class='line'>    @array = array
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def to_array
</span><span class='line'>    @array
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>With this, the test now passes. Great!</p>

<p>Now, we can add more stuff in. Let&rsquo;s write another test to make sure only arrays can get passed as arguments. As Ruby is not a type language, we cannot specify what data types we accept as an argument.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>it "accepts only an array as an argument" do
</span><span class='line'>    expect(Set.new([1,2,3]).to_array).to contain_exactly(1,2,3)
</span><span class='line'>    expect(Set.new(1).to_array).to contain_exactly()
</span><span class='line'>    expect(Set.new("a").to_array).to contain_exactly()
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>The test expects that if the argument is not an array, a set is made but it will be an empty set. It&rsquo;s important to note that our task is to write tests that fail. So even though the first expect line we write will pass, the other two will not.</p>

<p>To make this next step pass:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def initialize(array)
</span><span class='line'>  if array.class != Array
</span><span class='line'>    @array = []
</span><span class='line'>  else
</span><span class='line'>    @array = array
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Now we can worry about one of the definitions of a set - that it contains only unique values. And we can write a test for that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>it "will create a set with unique elements" do
</span><span class='line'>    expect(Set.new([1, 1, 2]).to_array).to contain_exactly(1, 2) 
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>To make this pass, we can call .uniq on the argument like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def initialize(array)
</span><span class='line'>  if array.class != Array
</span><span class='line'>    @array = []
</span><span class='line'>  else
</span><span class='line'>    @array = array.uniq
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>.uniq might not be the best way to do things, but it is important to keep in mind that at the moment, we are just concerned with doing the minimal to make the test pass.</p>

<p>I won&rsquo;t go through each and every one of my tests but eventually I found myself creating new sets for each test. So in my test file, I ended up doing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>before :each do
</span><span class='line'>  @shortset = Set.new([1])
</span><span class='line'>  @mediumset = Set.new([1, 2, 3, 4, 5, 6].shuffle)
</span><span class='line'>  @mediumset2 = Set.new([4, 5, 6, 7, 8, 9].shuffle)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This way I won&rsquo;t have to keep making new tests. Before each means that before each test, that block of code will run. So less repetition! I added the .shuffle because sets are not ordered. Before that, I had put in arrays in numerical order and didn&rsquo;t realize some tests actually failed when numerical order was not in place. Ideally, I think something I would change are the names of the sets as they aren&rsquo;t very descriptive. There&rsquo;s also a bit of refactoring to be done but the idea of TDD is to do the minimum to pass the tests and then write more tests that you expect to fail.</p>

<p>Overall, there&rsquo;s still some refactoring to be done but I quite like the practice I got with writing tests before the actual coding. I like TDD because it forces you to think before you code. You have to think about what you will be doing. And once the tests pass (there really is no better feeling&hellip;), you know that your job is done.</p>

<p>I&rsquo;m still tinkering around with it (with refactoring and such) but the full code can be viewed on github: <a href = "https://github.com/heatherlim/TDDPractice">HERE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Refactoring Process]]></title>
    <link href="http://heatherlim.github.io/blog/2015/12/17/a-refactoring-process/"/>
    <updated>2015-12-17T09:29:21-05:00</updated>
    <id>http://heatherlim.github.io/blog/2015/12/17/a-refactoring-process</id>
    <content type="html"><![CDATA[<p>For my final project, my group members and I were creating an app that would track prices of a selected item over time. Shoppers could add their items to a closet and &ldquo;follow&rdquo; other fellow shoppers. So there was a little bit of a social media aspect to it. This was tracked by an activity feed. Initially, I was just concerned with getting it working and because of that, my view really realllyyyy suffered.</p>

<p>Check out all this logic in my view:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;% @user.activity_feed.each do |activity| %&gt;
</span><span class='line'>
</span><span class='line'>          &lt;br&gt;&lt;br&gt;
</span><span class='line'>          &lt;strong&gt;
</span><span class='line'>            &lt;% if current_user.username == activity.user.username %&gt;
</span><span class='line'>                You
</span><span class='line'>            &lt;% else %&gt;
</span><span class='line'>                &lt;%= link_to activity.user.username, activity.user %&gt;
</span><span class='line'>            &lt;% end %&gt;
</span><span class='line'>          &lt;/strong&gt;
</span><span class='line'>          &lt;br&gt;
</span><span class='line'>          &lt;% if activity.trackable_type == "Closet" && activity.action == "create" %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;created closet &lt;/em&gt; &lt;%= activity.trackable_name %&gt;&lt;br&gt;
</span><span class='line'>              &lt;%= link_to closet_like_path(user_id: current_user.id, id: Closet.find_by(id: activity.trackable_id)), method: :put do %&gt;
</span><span class='line'>                  Like:
</span><span class='line'>                  &lt;%= activity.user.closets.find_by(name: activity.trackable_name).get_likes.size %&gt;
</span><span class='line'>              &lt;% end %&gt;
</span><span class='line'>
</span><span class='line'>          &lt;% elsif activity.trackable_type == "Closet" && activity.action == "destroy" %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;deleted closet &lt;/em&gt; &lt;%= activity.trackable_name %&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          &lt;% elsif activity.trackable.class == Item && activity.action == "create" %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;Added&lt;/em&gt; &lt;%= activity.trackable_name %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;to&lt;/em&gt; &lt;%= activity.trackable_source %&gt;&lt;br&gt;
</span><span class='line'>              &lt;%= link_to like_item_path(Item.find_by(id: activity.trackable_id)), method: :put do %&gt;
</span><span class='line'>                  Like:
</span><span class='line'>                  &lt;%= activity.user.items.find_by(name: activity.trackable_name).get_likes.size %&gt;
</span><span class='line'>              &lt;% end %&gt;
</span><span class='line'>
</span><span class='line'>          &lt;% elsif activity.trackable.class == Item && activity.action == "destroy" %&gt;
</span><span class='line'>
</span><span class='line'>              &lt;em class="text-muted"&gt;Deleted&lt;/em&gt; &lt;%= activity.trackable_name %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;from&lt;/em&gt; &lt;%= activity.trackable_source %&gt;
</span><span class='line'>
</span><span class='line'>          &lt;% elsif activity.trackable.class == User && activity.action == "create" %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;followed&lt;/em&gt; &lt;%= activity.trackable.username %&gt;
</span><span class='line'>
</span><span class='line'>          &lt;% elsif activity.trackable.class == User && activity.action == "destroy" %&gt;
</span><span class='line'>              &lt;em class="text-muted"&gt;unfollowed&lt;/em&gt; &lt;%= activity.trackable.username %&gt;
</span><span class='line'>          &lt;% end %&gt;
</span><span class='line'>
</span><span class='line'>      &lt;% end %&gt;
</span></code></pre></td></tr></table></div></figure>


<p>and&hellip; congratz. You made it to the end. It&rsquo;s kinda gross and awful. So let&rsquo;s think about how to fix that. First off, the activity feed was living in the boards index. I decided to move it over to a partial so the boards index.html.erb page now would just show this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;%= render partial: 'boards/activity_feed', locals: {user: @user}%&gt;</span></code></pre></td></tr></table></div></figure>


<p>But that still doesn&rsquo;t solve all that logic in the view! So right now I&rsquo;m thinking that I require a view object of some sort to handle the logic&hellip;</p>

<p>One issue that cropped up is the styling. When a user adds an item to a closet, they should get a message that would kinda look like this:</p>

<p><em>added</em> mediocre rubber pants <em>to</em> whatever closet</p>

<p>How was I supposed to selectively add styling to a whole message?</p>

<p>So at first I thought oh great all I have to do is put this in the view object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ActivityFeed
</span><span class='line'>
</span><span class='line'>  def self.message(activity)
</span><span class='line'>   if activity.trackable_type == "Closet" && activity.action == "create" 
</span><span class='line'>      "&lt;em class = 'text-muted'&gt;created closet&lt;/em&gt; #{activity.trackable_name}" 
</span><span class='line'>
</span><span class='line'>      elsif activity.trackable_type == "Closet" && activity.action == "destroy"
</span><span class='line'>      "&lt;em class = 'text-muted'&gt;deleted closet&lt;/em&gt; #{activity.trackable_name}" 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      elsif activity.trackable_type == "Item" && activity.action == "create"
</span><span class='line'>      "&lt;em class = 'text-muted'&gt;added&lt;/em&gt; #{activity.trackable_name} &lt;em class = 'text-muted'&gt;to&lt;/em&gt; #{activity.trackable_source}" 
</span><span class='line'>      
</span><span class='line'>      elsif activity.trackable_type == "Item" && activity.action == "destroy"
</span><span class='line'>      "&lt;em class = 'text-muted'&gt;deleted&lt;/em&gt; #{activity.trackable_name} &lt;em class = 'text-muted'&gt;from&lt;/em&gt; #{activity.trackable_source}"
</span><span class='line'>
</span><span class='line'>      elsif activity.trackable_type == "User" && activity.action == "create"
</span><span class='line'>      "&lt;em class = 'text-muted'&gt;followed&lt;/em&gt; #{activity.trackable.username}" 
</span><span class='line'>  
</span><span class='line'>      elsif activity.trackable_type == "User" && activity.action == "destroy"
</span><span class='line'>      "&lt;em class = 'text-muted'&gt;unfollowed&lt;/em&gt; #{activity.trackable.username}"
</span><span class='line'>      
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>and then all I have to do is call html_safe on the partial</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%@user.activity_feed.each do |activity|%&gt;
</span><span class='line'>    &lt;br&gt;&lt;br&gt;
</span><span class='line'>    &lt;strong&gt;
</span><span class='line'>    &lt;% if current_user.username == activity.user.username %&gt;
</span><span class='line'>    You
</span><span class='line'>    &lt;%else%&gt;
</span><span class='line'>   &lt;%= link_to activity.user.username, activity.user %&gt;
</span><span class='line'>   &lt;% end %&gt;
</span><span class='line'>  &lt;/strong&gt;
</span><span class='line'>   &lt;br&gt; 
</span><span class='line'>    &lt;%=ActivityFeed.message(activity).html_safe%&gt;
</span><span class='line'>&lt;%end%&gt;
</span></code></pre></td></tr></table></div></figure>


<p>But&hellip;. wait up, we don&rsquo;t want to have any html in our view object. It&rsquo;s kinda icky. One of the points of the view object is to separate the html from the logic.</p>

<p>But the styling was giving me a lot of issues. How could I make sure that only some text remained muted when I was getting back an entire string?</p>

<p>The solution for me was to add more methods into my view object. And that&rsquo;s ok.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ActivityFeed
</span><span class='line'>
</span><span class='line'>  attr_accessor :activity
</span><span class='line'>
</span><span class='line'>  def initialize(activity)
</span><span class='line'>    @activity = activity
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def actionmessage
</span><span class='line'>    if activity.trackable_type == "Closet" && activity.action == "create"
</span><span class='line'>      "created closet"
</span><span class='line'>
</span><span class='line'>      elsif activity.trackable_type == "Closet" && activity.action == "destroy"
</span><span class='line'>      "deleted closet" 
</span><span class='line'>
</span><span class='line'>      elsif activity.trackable_type == "Item" && activity.action == "create"
</span><span class='line'>      "added" 
</span><span class='line'>      
</span><span class='line'>      elsif activity.trackable_type == "Item" && activity.action == "destroy"
</span><span class='line'>      "deleted"
</span><span class='line'>
</span><span class='line'>      elsif activity.trackable_type == "User" && activity.action == "create"
</span><span class='line'>      "followed" 
</span><span class='line'>  
</span><span class='line'>      elsif activity.trackable_type == "User" && activity.action == "destroy"
</span><span class='line'>      "unfollowed" 
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def subject
</span><span class='line'>    activity.trackable_name
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def preposition
</span><span class='line'>    if activity.action == "create"
</span><span class='line'>      "to"
</span><span class='line'>    else
</span><span class='line'>      "from"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def closet
</span><span class='line'>    activity.trackable_source
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>I also added an attribute accessor to lessen the repetition in the partial when I found myself re-typing ActivityFeed.trackable_type one too many times. So this is what the partial looks like now:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%@user.activity_feed.each do |activity|%&gt;
</span><span class='line'>&lt;% activityview = ActivityFeed.new(activity) %&gt;
</span><span class='line'>    &lt;br&gt;&lt;br&gt;
</span><span class='line'>    &lt;strong&gt;
</span><span class='line'>    &lt;% if current_user.username == activity.user.username %&gt;
</span><span class='line'>    You
</span><span class='line'>    &lt;%else%&gt;
</span><span class='line'>   &lt;%= link_to activity.user.username, activity.user %&gt;
</span><span class='line'>   &lt;% end %&gt;
</span><span class='line'>  &lt;/strong&gt;
</span><span class='line'>   &lt;br&gt; 
</span><span class='line'>    &lt;% if activity.trackable_type == "Item" %&gt;
</span><span class='line'>
</span><span class='line'>      &lt;em class = 'text-muted'&gt;&lt;%=activityview.actionmessage%&gt;&lt;/em&gt; &lt;%=activityview.subject%&gt; &lt;em class = 'text-muted'&gt; &lt;%= activityview.preposition %&gt; &lt;/em&gt;&lt;%=activityview.closet%&gt;
</span><span class='line'>    &lt;% else %&gt;
</span><span class='line'>      &lt;em class = 'text-muted'&gt; &lt;%=activityview.actionmessage%&gt;&lt;/em&gt; &lt;%=activityview.subject%&gt;
</span><span class='line'>    &lt;% end %&gt;
</span><span class='line'>
</span><span class='line'>&lt;%end%&gt;</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s already looking a lot better, half the size it was before and way more readable.</p>

<p>Refactoring is definitely a process for me and it involves many little edits along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Methods of Sorting and a Bit of Trailing Around from There]]></title>
    <link href="http://heatherlim.github.io/blog/2015/11/09/methods-of-sorting/"/>
    <updated>2015-11-09T22:14:16-05:00</updated>
    <id>http://heatherlim.github.io/blog/2015/11/09/methods-of-sorting</id>
    <content type="html"><![CDATA[<p>While working on my sorting program, I came across several interesting methods that I didn&rsquo;t know before. While I haven&rsquo;t used any of them in my project thus far, I still found them pretty cool. From there I normally go on long google crawls until sometimes I learn things completely unrelated but still pretty cool. So this blog post is about my train of thought and how I get from sorting to something else entirely.</p>

<p>The first two methods I played around with were array methods called permutation and combination.</p>

<p>An example of permutation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1, 2, 3].permutation.to_a
</span><span class='line'>=&gt; [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
</span><span class='line'>[1, 2, 3].permutation(2).to_a
</span><span class='line'>=&gt; [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]</span></code></pre></td></tr></table></div></figure>


<p>An example of combination:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1, 2, 3].combination(2).to_a
</span><span class='line'>=&gt; [[1, 2], [1, 3], [2, 3]] </span></code></pre></td></tr></table></div></figure>


<p>Combination requires you to put in an argument while permutation does not. Permutation defaults to the number of elements in the array. Also notable is that there are always going to be more permutations than combinations because combination takes order of the elements into account so [1, 2] and [2, 1] are considered the same.</p>

<p>So how could I find all combinations in an array of people so that every person in the array would have met exactly once? So a group of Mary and Tom would be considered the same as a group of Tom and Mary. Well&hellip; there&rsquo;s a gem for that. It&rsquo;s called the round robin tournmanet gem. And I&rsquo;ll provide a link at the bottom.</p>

<p>This is a portion of its  code that I copied from its github repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def self.schedule(array)
</span><span class='line'>    array.push nil if array.size.odd?
</span><span class='line'>    n = array.size
</span><span class='line'>    pivot = array.pop
</span><span class='line'>    games = (n - 1).times.map do
</span><span class='line'>      array.rotate!
</span><span class='line'>      [[array.first, pivot]] + (1...(n / 2)).map { |j| [array[j], array[n - 1 - j]] }
</span><span class='line'>    end
</span><span class='line'>    array.push pivot unless pivot.nil?
</span><span class='line'>    games
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # running it will give...
</span><span class='line'>
</span><span class='line'>  self.schedule(a)
</span><span class='line'> =&gt; [[[2, 4], [3, 1]], [[3, 4], [1, 2]], [[1, 4], [2, 3]]] </span></code></pre></td></tr></table></div></figure>


<p>Pretty cool!</p>

<p>Interestingly enough however, while I find methods that work for sorting unique pairs, unique trios and so on&hellip; they all function very differently so I&rsquo;m still looking for one that could work in all cases for my sorting project.</p>

<p>Another method I found helpful is a rails method called in_groups_of. It is used to split an array into groups of whatever number is put inside the argument.</p>

<p>Here&rsquo;s an example of its usage:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%w(1 2 3 4 5 6 7 8 9 10).in_groups_of(3) {|group| p group}
</span><span class='line'>["1", "2", "3"]
</span><span class='line'>["4", "5", "6"]
</span><span class='line'>["7", "8", "9"]
</span><span class='line'>["10", nil, nil]</span></code></pre></td></tr></table></div></figure>


<p>The example I saw was the first time I saw %w in use too. Putting the %w makes it so the elements are split up by the whitespace. So I would be able to get the same result if I had typed [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].in_groups_of(3) as well.</p>

<p>Note that it padded the last group with nil. There&rsquo;s a way around that if that isn&rsquo;t what you&rsquo;re looking for. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%w(1 2 3 4 5).in_groups_of(2, false) {|group| p group}
</span><span class='line'>["1", "2"]
</span><span class='line'>["3", "4"]
</span><span class='line'>["5"]</span></code></pre></td></tr></table></div></figure>


<p>Here you can see there is a second argument placed. When false is written there, it will not pad the remaining spaces left over from the uneven grouping. Aside from false, you can also place anything else in there and the method will use that to pad the empty spaces.</p>

<p>This method however is only available in rails. In ruby there is a similar method called each_slice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1..10).each_slice(3) {|a| p a}
</span><span class='line'># outputs below
</span><span class='line'>[1, 2, 3]
</span><span class='line'>[4, 5, 6]
</span><span class='line'>[7, 8, 9]
</span><span class='line'>[10]</span></code></pre></td></tr></table></div></figure>


<p>Aside from a range, it is also possible to use it on an array. Both of those methods work similar to the way my sorting program does. But it divides up an array based on how many elements one wants inside each new group rather than the group number.</p>

<p>Something random I found interesting when I was experimenting was that when I called .class on the result of each_slice, I was getting a NilClass.</p>

<p>What I copied from my cmd line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.2.2 :010 &gt; (1..10).each_slice(3) {|a| p a}
</span><span class='line'>[1, 2, 3]
</span><span class='line'>[4, 5, 6]
</span><span class='line'>[7, 8, 9]
</span><span class='line'>[10]
</span><span class='line'> =&gt; nil 
</span><span class='line'>2.2.2 :011 &gt; _.class
</span><span class='line'>=&gt; NilClass </span></code></pre></td></tr></table></div></figure>


<p>I thought it was interesting because I was using &lsquo;p&rsquo; in the {|a| p a } part. A distinction between p and puts would be that p normally returns to me the actual class. Not nil. Maybe it returned nile because of something to do with the iteration? I&rsquo;m not too sure.</p>

<p>Distinguising p and puts example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.2.2 :017 &gt; p "1"
</span><span class='line'>"1"
</span><span class='line'> =&gt; "1" 
</span><span class='line'>2.2.2 :018 &gt; _.class
</span><span class='line'> =&gt; String 
</span><span class='line'>2.2.2 :019 &gt; puts "1"
</span><span class='line'>1
</span><span class='line'> =&gt; nil 
</span><span class='line'>2.2.2 :020 &gt; _.class
</span><span class='line'> =&gt; NilClass </span></code></pre></td></tr></table></div></figure>


<p>p calls on .inspect. Notie that the return value is not nil. So it was odd for me that in the each slice example it gave me a nil return value. I experimented a bit further with each slice to see what puts and print would give me if I placed it where the p was.</p>

<p>print:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.2.2 :024 &gt; (1..10).each_slice(3) {|a| print a}
</span><span class='line'>[1, 2, 3][4, 5, 6][7, 8, 9][10] =&gt; nil </span></code></pre></td></tr></table></div></figure>


<p>Considering that print was like puts but does not add a new line, I was not too surprised to see this.</p>

<p>But when I used puts&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.2.2 :025 &gt; (1..10).each_slice(3) {|a| puts a}
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6
</span><span class='line'>7
</span><span class='line'>8
</span><span class='line'>9
</span><span class='line'>10
</span><span class='line'> =&gt; nil </span></code></pre></td></tr></table></div></figure>


<p>It surprised me that it did not actually output the arrays but just the whole range. I&rsquo;m not too sure why it did that. I assume on the first iteration a is [1, 2, 3] and so on&hellip; and used a pry to confirm it was too. So I wonder why it prints out the whole range instead of the array.</p>

<p>References:<br>
<a href = "http://chriscontinanza.com/2010/10/29/Array.html">Permutations and Combinations</a><br>
<a href = "http://apidock.com/rails/Array/in_groups_of">in groups of</a><br>
<a href = "http://apidock.com/ruby/Enumerable/each_slice">each slice</a><br>
<a href = "http://www.garethrees.co.uk/2013/05/04/p-vs-puts-vs-print-in-ruby/">difference between p, puts and print</a><br>
<a href = "https://github.com/ssaunier/round_robin_tournament">round robin gem</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things Coming Round Again and the Importance of Thinking Before Coding]]></title>
    <link href="http://heatherlim.github.io/blog/2015/10/25/my-first-post-on-octopress/"/>
    <updated>2015-10-25T20:44:04-04:00</updated>
    <id>http://heatherlim.github.io/blog/2015/10/25/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still working on my cute random group sample code because spending hours solving a &ldquo;problem&rdquo; that probably takes up just ten minutes of your time doing manually is a fun thing to do. It really is.</p>

<p>Anyway, it has made a lot of progress from before. I remembered that I was so uncomfortable with classes two weeks ago&hellip; and now&hellip; well I&rsquo;m still not as comfortable as I&rsquo;d like to be but I&rsquo;m actually using them now which is a plus. Something I learned while working on this is that sometimes the best way to solve a problem is the simplest approach. I was so excited about using .sample that I ignored some of the more obvious methods to use. Instead, I used .sample and .pop to pull random people from the array.</p>

<p>This is a section of my original code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def random_group(people, groupnumber)
</span><span class='line'>  random_person = people.sample
</span><span class='line'>  binding.pry
</span><span class='line'>  group_array = [] 
</span><span class='line'>   Array.new(groupnumber) {people.sample }
</span><span class='line'>    people.each do |each_person|
</span><span class='line'>      if each_person != random_person
</span><span class='line'>        group_array &lt;&lt; random_person
</span><span class='line'>        people.delete_if {|repeat_person| repeat_person == random_person}
</span><span class='line'>        binding.pry
</span><span class='line'>      elsif each_person == random_person
</span><span class='line'>        people.delete_if {|repeat_person| repeat_person == random_person}
</span><span class='line'>      end     
</span><span class='line'>    end</span></code></pre></td></tr></table></div></figure>


<p>If you can&rsquo;t decipher what the hell is going on, that&rsquo;s fine because it didn&rsquo;t work and I could barely tell myself what I was doing. First warning sign I suppose that I should find a different approach.</p>

<p>My problem I outlined in my previous post was that .sample would take a random person out of the array but there when the method was run again, there was still a chance to pick the same person out of the array. The person wasn&rsquo;t actually removed in the array. While I had thought I could use .pop, that method would not be random.</p>

<p>The solution was to use .shuffle before .pop was used. This way, I can now pick random people out of the array until it was empty. I wasted a lot of time with .sample because I was too focused in using .sample than using the right tool for the job. I&rsquo;m not saying using .sample is impossible but .shuffle and .pop made mroe sense to me.</p>

<p>Now my code has two methods that make the hash and fill it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def create_groups 
</span><span class='line'>     range = (1..@groupnumber).to_a
</span><span class='line'>     range.each do |indgroup| # 1, 2, 3, 4...
</span><span class='line'>     @groups["group" + " " + "#{indgroup}"] = []
</span><span class='line'>    end  
</span><span class='line'>    @groups
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def filling_group
</span><span class='line'>    people_number = @people.count/@groupnumber
</span><span class='line'>    range = (1..@groupnumber).to_a
</span><span class='line'>     range.each do |indgroup|
</span><span class='line'>        @groups["group" + " " + "#{indgroup}"] &lt;&lt; @people.shuffle!.pop(people_number)    
</span><span class='line'>          @groups.values.each do |x|
</span><span class='line'>            x.flatten!
</span><span class='line'>         end
</span><span class='line'>     end 
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>With this, I had fulfilled the first goal I set. Right now, my code could create x number of groups for x amount of people. I added the code below as well so that it would be possible for people to be divided into groups even if the groups were uneven. Like 20 people could be divided into 7 groups and so on.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def if_uneven
</span><span class='line'>    range = (1..@people.count).to_a
</span><span class='line'>    range.each do |indgroup|
</span><span class='line'>      @groups["group" + " " + "#{indgroup}"] &lt;&lt; @people.shuffle!.pop
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>After people are sorted into groups, the remaining number of people would in the people array would be iterated through again and distributed amoungst the groups already made.</p>

<p>And now comes the part where thinking ahead would have really helped me out. I had thought that being able to sort people randomly into groups was the first step in my project. The second step would be to show all other unique possibilities of groups. Though I could keep running the program, it does not actually &ldquo;remember&rdquo; the last distribution it made. So it is highly possible that if Person 1 and Person 2 were paired together, they could be paired together again whether in the same group or a different one.</p>

<p>I spent awhile thinking about how to make the program remember what groups each person was put into and make sure they&rsquo;d never be in a group where some of their original group mates were. Should I use databases to store this information? Or I could make an even bigger hash. I could place</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups = {
</span><span class='line'>  :group1 =&gt; [],
</span><span class='line'>  :group2 =&gt; [],
</span><span class='line'>  :group3 =&gt; [],
</span><span class='line'>  :group4 =&gt; [],
</span><span class='line'>  :group5 =&gt; []
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>into a hash with values of days. So it would be Day 1 => groups&hellip; Day 2 => groups&hellip;</p>

<p>But then I realized that my problem was a symptom of not thinking ahead. If I were going to list out all possible unique combinations, why the hell was I randomizing it? Instead, I needed a method that would pick out the groups in the exact same way each time.</p>

<p>So thinking ahead would have saved me a lot of time though in the end I still learned a lot. Though just for more practice I decided to try make my program into a webapp to get more familiar with sinatra. The final result is a page that would show groups and their random distribution whenever it gets refreshed. Eventually I&rsquo;d like to make a form where people can simply input the number of groups they want and the people they want to sort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Had Problems With Arrays/Hashes/Pigeons... (and what else I learned)]]></title>
    <link href="http://heatherlim.github.io/blog/2015/10/06/first-blog-post/"/>
    <updated>2015-10-06T21:04:50-04:00</updated>
    <id>http://heatherlim.github.io/blog/2015/10/06/first-blog-post</id>
    <content type="html"><![CDATA[<p>Iteration was my first challenge that I didn&rsquo;t really know what to make of. I went through great pains to not use it. On the first lab where we had to write a method that could tel if a number was prime or not, instead of iterating through the whole array range to see if there were more than two zeroes (the array represented the number being divided by 1 to that particular number. So the first element in the array would be that number divided by one, the second element would be that number divided by two and so on&hellip; if the number was prime, the modulo should return only two 0s), I would instead sort the array and check if array[2] == 0.</p>

<p>So already by avoiding it, I made it harder for myself to pick up. It was probably the first method that didn&rsquo;t look to be in plain English for me. It was pretty abstract.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>basket = ["apple 1","apple 2","apple 3","apple 4","apple 5","apple 6","apple 7","apple 8","apple 9","apple 10"]
</span><span class='line'>
</span><span class='line'>basket.each do |apple|
</span><span class='line'>    puts "Taking out #{apple}"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>It didn&rsquo;t click until later that the word between the | | could be anything. In this case it is apple because it describes each element of the array that is picked up. But it is only for ease of understanding. It could be |oranges| for all the program cares.</p>

<p>It also helped me to visualize what&rsquo;s going on. Basically it was as though a pedantic person was going over each item in the array one by one and then executing whatever the instructions below told him to. So apple (or whatever is between the ||) would be equal to the string &ldquo;apple 1&rdquo; and then &ldquo;apple 2&rdquo; and so on&hellip;</p>

<p>It&rsquo;s a step by step process that I guess I could read as for each item in the array, do this to that item. And that started to make it clearer for me rather than what I thinking before. That it was some kind of magic thing that did something all at once. Figuring out the plain English equivalent made it also easier for me to finish the pigeon hash lab where we had to sort out pigeons by their names and attributes. The tricky part was understanding what exactly you were getting between those ||.</p>

<p>Because I found iteration difficult, on my own time, I decided to make a cute program that would be able to take in a bunch of people and divide them into however many groups the user would want. The program would return different groups each time it was run.</p>

<p>For example, while the input would look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>people = ["Adrian", "Polly", "John", "Ivan", "Jack", "Tom", "Anna", "Mary", "Ben", "Jeff",
</span><span class='line'>"Alex", "Megan", "Helen", "Sarah", "Wei", "Aristo", "Jane", "Meredith", "Liz", "Lacey"]</span></code></pre></td></tr></table></div></figure>


<p>The output will be in this format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups = {
</span><span class='line'>   :group1 =&gt; [-names here-],
</span><span class='line'>   :group2 =&gt; [-names here-],
</span><span class='line'>   :group3 =&gt; [-names here-],
</span><span class='line'>   :group4 =&gt; [-names here-],
</span><span class='line'>   :group5 =&gt; [-names here-]
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<p>Because I wanted to find a random person from the people array, I thought why not find a random number with rand() and make the number inside rand to be people.count? Then, if I named that variable something, I could call it into people[random] and it should return a random person from the array.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>random = rand(people.count)
</span><span class='line'>  people[random]
</span></code></pre></td></tr></table></div></figure>


<p>After this, I would be able to shovel in random people into their arrays as long as the people inside each of their arrays would not exceed the people.length/groupnumber. Which makes sense because if the array has 20 people in it, and we want to make five groups, each group would have four people in it.</p>

<p>However, even though I made progress with feeling more comfortable with iteration, I found it difficult to return a different random person each time so my groups would always be filled with the same random person. My logic was something like how can I iterate over my random variable if it wasn&rsquo;t an array? Then I tried some stuff with iterating over the people array and only shoveling in each person if the person value was equal to the random person value&hellip;</p>

<p>In any case, it didn&rsquo;t quite work out and I found a different method to get four different people into the array. So first I wanted to make an array with variables in it equal to the number of people I wanted in the group. So let that variable be called people_in_group (which would be the length of the people array divided by the number of groups we want).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array.new(people_in_group)
</span></code></pre></td></tr></table></div></figure>


<p>Now this should create an array with a bunch of nils. But we can use .sample</p>

<p>.sample can choose a random element from the array</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array.new(people_in_group){people.sample}
</span></code></pre></td></tr></table></div></figure>


<p>This will fill the new array with random people until the number of elements it has is equal to the number of people we want in the group.</p>

<p>Right now I&rsquo;m working on making sure there are no repeated people inside each array. Then I will make sure the people do not repeat in each group.</p>

<p>So hopefully completing this mini program will help me out further with iteration and sorting. In any case, maybe I&rsquo;ll be qualified enough as an entry-level pigeon sorter.</p>

<p>My current trouble is now with classes. So hopefully by the next time I make another post I&rsquo;ll be confident enough to write a little about it.</p>
]]></content>
  </entry>
  
</feed>
